let tagclass = load[<TagClassId: @vec {int -> long}, isSubclassOf_TagClassId: @vec {int -> long}, size: int>]("datasets/lsqb/TagClass.csv") in
let tag = load[<TagId: @vec {int -> long}, hasType_TagClassId: @vec {int -> long}, size: int>]("datasets/lsqb/Tag.csv") in
let comment = load[<CommentId: @vec {int -> long}, hasCreator_PersonId: @vec {int -> long}, isLocatedIn_CountryId: @vec {int -> long}, replyOf_PostId: @vec {int -> long}, replyOf_CommentId: @vec {int -> long}, size: int>]("datasets/lsqb/Comment.csv") in
let cht = load[<CommentId: @vec {int -> long}, TagId: @vec {int -> long}, size: int>]("datasets/lsqb/Comment_hasTag_Tag.csv") in
let post = load[<PostId: @vec {int -> long}, hasCreator_PersonId: @vec {int -> long}, Forum_containerOfId: @vec {int -> long}, isLocatedIn_CountryId: @vec {int -> long}, size: int>]("datasets/lsqb/Post.csv") in
let forum = load[<ForumId: @vec {int -> long}, hasModerator_PersonId: @vec {int -> long}, size: int>]("datasets/lsqb/Forum.csv") in
let fhp = load[<ForumId: @vec {int -> long}, PersonId: @vec {int -> long}, size: int>]("datasets/lsqb/Forum_hasMember_Person.csv") in
let person = load[<PersonId: @vec {int -> long}, isLocatedIn_CityId: @vec {int -> long}, size: int>]("datasets/lsqb/Person.csv") in
let city = load[<CityId: @vec {int -> long}, isPartOf_CountryId: @vec {int -> long}, size: int>]("datasets/lsqb/City.csv") in
let country = load[<CountryId: @vec {int -> long}, isPartOf_ContinentId: @vec {int -> long}, size: int>]("datasets/lsqb/Country.csv") in

let tagclass_trie0 = sum(<i, _> <- range(tagclass.size)) @phmap(tagclass.size) { tagclass.TagClassId(i) -> 1 } in
let interm0_trie0 = sum(<tag_off, _> <- range(tag.size))
	let x0 = tag.hasType_TagClassId(tag_off) in
	if (x0 ∈ tagclass_trie0) then
		let tagclass_trie1 = tagclass_trie0(x0) in
		{ tag.TagId(tag_off) -> tagclass_trie1 }

let comment_trie0 = sum(<i, _> <- range(comment.size)) @phmap(comment.size) { comment.CommentId(i) -> @smallvecdict(4) { i -> 1 } } in
let post_trie0 = sum(<i, _> <- range(post.size)) @phmap(post.size) { post.PostId(i) -> @smallvecdict(4) { i -> 1 } } in
let forum_trie0 = sum(<i, _> <- range(forum.size)) @phmap(forum.size) { forum.ForumId(i) -> 1 } in
let interm1_trie0 = sum(<cht_off, _> <- range(cht.size))
	let x0 = cht.TagId(cht_off) in
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		let x1 = cht.CommentId(cht_off) in
		if (x1 ∈ comment_trie0) then
			let comment_trie1 = comment_trie0(x1) in
			sum(<comment_off, _> <- comment_trie1)
				let x2 = comment.replyOf_PostId(comment_off) in
				if (x2 ∈ post_trie0) then
					let post_trie1 = post_trie0(x2) in
					sum(<post_off, _> <- post_trie1)
						let x3 = post.Forum_containerOfId(post_off) in
						if (x3 ∈ forum_trie0) then
							let forum_trie1 = forum_trie0(x3) in
							{ x3 -> forum_trie1 * interm0_trie1 }

let person_trie0 = sum(<i, _> <- range(person.size)) @phmap(person.size) { person.PersonId(i) -> @smallvecdict(4) { i -> 1 } } in
let city_trie0 = sum(<i, _> <- range(city.size)) @phmap(city.size) { city.CityId(i) -> @smallvecdict(4) { i -> 1 } } in
let country_trie0 = sum(<i, _> <- range(country.size)) @phmap(country.size) { country.CountryId(i) -> 1 } in
sum(<fhp_off, _> <- range(fhp.size))
	let x0 = fhp.ForumId(fhp_off) in
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		let x1 = fhp.PersonId(fhp_off) in
		if (x1 ∈ person_trie0) then
			let person_trie1 = person_trie0(x1) in
			sum(<person_off, _> <- person_trie1)
				let x2 = person.isLocatedIn_CityId(person_off) in
				if (x2 ∈ city_trie0) then
					let city_trie1 = city_trie0(x2) in
					sum(<city_off, _> <- city_trie1)
						let x3 = city.isPartOf_CountryId(city_off) in
						if (x3 ∈ country_trie0) then
							let country_trie1 = country_trie0(x3) in
							interm1_trie1 * country_trie1