let comment = load[<CommentId: @vec {int -> long}, hasCreator_PersonId: @vec {int -> long}, isLocatedIn_CountryId: @vec {int -> long}, replyOf_PostId: @vec {int -> long}, replyOf_CommentId: @vec {int -> long}, size: int>]("datasets/lsqb/Comment.csv") in
let comment_offsets = ext(`SortedIndices`, comment.CommentId, comment.replyOf_PostId)
let cht = load[<CommentId: @vec {int -> long}, TagId: @vec {int -> long}, size: int>]("datasets/lsqb/Comment_hasTag_Tag.csv") in
let cht_offsets = ext(`SortedIndices`, cht.CommentId)
let pht = load[<PostId: @vec {int -> long}, TagId: @vec {int -> long}, size: int>]("datasets/lsqb/Post_hasTag_Tag.csv") in
let pht_offsets = ext(`SortedIndices`, pht.PostId)

timer

let comment_trie0 = sum(<i, _> <- range(comment.size)) @st(comment.size) { comment.CommentId(comment_offsets(i)) -> @st { comment.replyOf_PostId(comment_offsets(i)) -> 1 } } in
let cht_trie0 = sum(<i, _> <- range(cht.size)) @st(cht.size) { cht.CommentId(cht_offsets(i)) -> 1 } in
let pht_trie0 = sum(<i, _> <- range(pht.size)) @st(pht.size) { pht.PostId(pht_offsets(i)) -> 1 } in
sum(<x0, cht_trie1> <- cht_trie0)
	if (x0 ∈ comment_trie0) then
		let comment_trie1 = comment_trie0(x0) in
		sum(<x1, comment_trie2> <- comment_trie1)
			if (x1 ∈ pht_trie0) then
				let pht_trie1 = pht_trie0(x1) in
				comment_trie2 * pht_trie1 * cht_trie1