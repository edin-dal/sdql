let customer = load[{<c_custkey: int, c_name: string, c_address: string, c_nationkey: int, c_phone: string, c_acctbal: double, c_mktsegment: string, c_comment: string> -> int}]("datasets/tpch/customer.tbl")

let orders = load[{<o_orderkey: int, o_custkey: int, o_orderstatus: string, o_totalprice: double, o_orderdate: date, o_orderpriority: string, o_clerk: string, o_shippriority: int, o_comment: string> -> int}]("datasets/tpch/orders.tbl")

let o_h =
  sum_vec(<o,o_v> <- orders)
    { o.o_custkey -> 1 }

let fused =
  sum(<c,c_v> <- customer)
    let cond = (
                 (0.0 < c.c_acctbal) &&
                 (
                   ext(`StrStartsWith`, c.c_phone, "13") ||
                   ext(`StrStartsWith`, c.c_phone, "31") ||
                   ext(`StrStartsWith`, c.c_phone, "23") ||
                   ext(`StrStartsWith`, c.c_phone, "29") ||
                   ext(`StrStartsWith`, c.c_phone, "30") ||
                   ext(`StrStartsWith`, c.c_phone, "18") ||
                   ext(`StrStartsWith`, c.c_phone, "17")
                 )
               )
    // parsing fails without this trivial conditional - C++ compiler can optimise it away
    if(true) then
      < total = if(cond) then c.c_acctbal else 0.0, count = if(cond) then 1.0 else 0.0 >
    else
      < >

let avg = fused.total / fused.count

sum(<c,c_v> <- customer)
  if(
    (avg < c.c_acctbal) &&
    (!o_h(c.c_custkey)) &&
    (
      ext(`StrStartsWith`, c.c_phone, "13") ||
      ext(`StrStartsWith`, c.c_phone, "31") ||
      ext(`StrStartsWith`, c.c_phone, "23") ||
      ext(`StrStartsWith`, c.c_phone, "29") ||
      ext(`StrStartsWith`, c.c_phone, "30") ||
      ext(`StrStartsWith`, c.c_phone, "18") ||
      ext(`StrStartsWith`, c.c_phone, "17")
    )
  ) then
    { ext(`SubString`, c.c_phone, 0, 2) -> < _ = 1, _ = c.c_acctbal > }
  else
    { }
