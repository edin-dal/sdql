let partsupp = load[<ps_partkey: @vec {int -> int}, ps_suppkey: @vec {int -> int}, ps_availqty: @vec {int -> double}, ps_supplycost: @vec {int -> double}, ps_comment: @vec {int -> varchar(199)}, size: int>]("datasets/tpch/partsupp.tbl")

let part = load[<p_partkey: @vec {int -> int}, p_name: @vec {int -> varchar(55)}, p_mfgr: @vec {int -> varchar(25)}, p_brand: @vec {int -> varchar(10)}, p_type: @vec {int -> varchar(25)}, p_size: @vec {int -> int}, p_container: @vec {int -> varchar(10)}, p_retailprice: @vec {int -> double}, p_comment: @vec {int -> varchar(23)}, size: int>]("datasets/tpch/part.tbl")

let supplier = load[<s_suppkey: @vec {int -> int}, s_name: @vec {int -> varchar(25)}, s_address: @vec {int -> varchar(40)}, s_nationkey: @vec {int -> int}, s_phone: @vec {int -> varchar(15)}, s_acctbal: @vec {int -> double}, s_comment: @vec {int -> varchar(101)}, size: int>]("datasets/tpch/supplier.tbl")

let brand = ext(`ConstantString`, "Brand#45", 9)
let medpol = ext(`ConstantString`, "MEDIUM POLISHED", 16)
let _customer = ext(`ConstantString`, "Customer", 9)
let _complaints = ext(`ConstantString`, "Complaints", 11)
let nchars_customer = 8

let p_h =
  sum(<i,_> <- range(part.size))
    let p = <
      p_partkey=part.p_partkey(i),
      p_name=part.p_name(i),
      p_mfgr=part.p_mfgr(i),
      p_brand=part.p_brand(i),
      p_type=part.p_type(i),
      p_size=part.p_size(i),
      p_container=part.p_container(i),
      p_retailprice=part.p_retailprice(i),
      p_comment=part.p_comment(i)
    >
    if(
      (p.p_brand != brand) &&
      (!ext(`StrStartsWith`, p.p_type, medpol)) &&
      (
        (p.p_size ==  49) ||
        (p.p_size ==  14) ||
        (p.p_size ==  23) ||
        (p.p_size ==  45) ||
        (p.p_size ==  19) ||
        (p.p_size ==  3) ||
        (p.p_size ==  36) ||
        (p.p_size ==  9)
      )
    ) then
      { unique(p.p_partkey) -> < _ = p.p_brand, _ = p.p_type, _ = p.p_size > }
    else
      { }

let s_h =
  sum(<i,_> <- range(supplier.size))
    let s = <
      s_suppkey=supplier.s_suppkey(i),
      s_name=supplier.s_name(i),
      s_address=supplier.s_address(i),
      s_nationkey=supplier.s_nationkey(i),
      s_phone=supplier.s_phone(i),
      s_acctbal=supplier.s_acctbal(i),
      s_comment=supplier.s_comment(i)
    >
    let idx_customer = ext(`FirstIndex`, s.s_comment, _customer)
    if((idx_customer != -1) && (idx_customer + nchars_customer <= ext(`FirstIndex`, s.s_comment, _complaints))) then
      { unique(s.s_suppkey) -> < _ = s.s_suppkey > }
    else
      { }

let ps_h =
  sum(<i,_> <- range(partsupp.size))
    let ps = <
      ps_partkey=partsupp.ps_partkey(i),
      ps_suppkey=partsupp.ps_suppkey(i),
      ps_availqty=partsupp.ps_availqty(i),
      ps_supplycost=partsupp.ps_supplycost(i),
      ps_comment=partsupp.ps_comment(i)
    >
    if ((p_h(ps.ps_partkey) != {}) && (!(s_h(ps.ps_suppkey) != {}))) then
    {
      <
        brand = p_h(ps.ps_partkey)(0),
        type = p_h(ps.ps_partkey)(1),
        size = p_h(ps.ps_partkey)(2)
      > ->
      { ps.ps_suppkey -> 1 }
    }
    else
      { }

sum(<k,v> in ps_h)
  { unique(concat(k, < _ = ext(`Size`, v) >)) -> 1 }
