let supplier = load[{<s_suppkey: int, s_name: string, s_address: string, s_nationkey: int, s_phone: string, s_acctbal: double, s_comment: string> -> int}]("datasets/tpch/supplier.tbl")

let lineitem = load[{<l_orderkey: int, l_partkey: int, l_suppkey: int, l_linenumber: int, l_quantity: double, l_extendedprice: double, l_discount: double, l_tax: double, l_returnflag: string, l_linestatus: string, l_shipdate: date, l_commitdate: date, l_receiptdate: date, l_shipinstruct: string, l_shipmode: string, l_comment: string> -> int}]("datasets/tpch/lineitem.tbl")

let orders = load[{<o_orderkey: int, o_custkey: int, o_orderstatus: string, o_totalprice: double, o_orderdate: date, o_orderpriority: string, o_clerk: string, o_shippriority: int, o_comment: string> -> int}]("datasets/tpch/orders.tbl")

let nation = load[{<n_nationkey: int, n_name: string, n_regionkey: int, r_comment: string> -> int}]("datasets/tpch/nation.tbl")

let n_h =
  sum(<n,n_v> <- nation)
    if(n.n_name == "SAUDI ARABIA") then
      { n.n_nationkey -> < _ = n.n_nationkey > }
    else
      { }

let s_h =
  sum(<s,s_v> <- supplier)
    if(n_h(s.s_nationkey) != {}) then
      { s.s_suppkey -> s.s_name }
    else
      { }

// TODO sdqlpy stores o_h as a vector
let o_h =
  sum(<o,o_v> <- orders)
    if(o.o_orderstatus == "F") then
      { o.o_orderkey -> 1 }
    else
      { }

// TODO sdqlpy stores l_h as a vector or vectors
let l_h =
  sum(<l,l_v> <- lineitem)
    { l.l_orderkey ->  { l.l_suppkey -> 1 } }

// TODO sdqlpy stores l_h_filtered as a vector or vectors
let l_h_filtered =
  sum(<l,l_v> <- lineitem)
    if(l.l_commitdate < l.l_receiptdate) then
      { l.l_orderkey ->  { l.l_suppkey -> 1 } }
    else
      { }

let result_h =
  sum(<l,l_v> <- lineitem)
    if(
      (l.l_commitdate < l.l_receiptdate) &&
      (s_h(l.l_suppkey) != {}) &&
      (o_h(l.l_orderkey) != {}) &&
      (1 < ext(`Size`, l_h(l.l_orderkey))) &&
      (ext(`Size`, l_h_filtered(l.l_orderkey)) <= 1)
    ) then
      { < name = s_h(l.l_suppkey) > -> < numwait = 1> }
    else
      { }

let limit_h = ext(`Limit`, result_h, 100, true)

sum(<k,v> <- limit_h)
  { concat(k,v) -> 1 }
