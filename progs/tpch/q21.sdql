let supplier = load_cstore[{<s_suppkey: int, s_name: varchar(25), s_address: varchar(40), s_nationkey: int, s_phone: varchar(15), s_acctbal: double, s_comment: varchar(101)> -> int}]("datasets/tpch/supplier.tbl")

let lineitem = load_cstore[{<l_orderkey: int, l_partkey: int, l_suppkey: int, l_linenumber: int, l_quantity: double, l_extendedprice: double, l_discount: double, l_tax: double, l_returnflag: varchar(1), l_linestatus: varchar(1), l_shipdate: date, l_commitdate: date, l_receiptdate: date, l_shipinstruct: varchar(25), l_shipmode: varchar(10), l_comment: varchar(44)> -> int}]("datasets/tpch/lineitem.tbl")

let orders = load_cstore[{<o_orderkey: int, o_custkey: int, o_orderstatus: varchar(1), o_totalprice: double, o_orderdate: date, o_orderpriority: varchar(15), o_clerk: varchar(15), o_shippriority: int, o_comment: varchar(79)> -> int}]("datasets/tpch/orders.tbl")

let nation = load_cstore[{<n_nationkey: int, n_name: varchar(25), n_regionkey: int, n_comment: varchar(152)> -> int}]("datasets/tpch/nation.tbl")

let saudi = ext(`ConstantString`, "SAUDI ARABIA", 13)
let f = ext(`ConstantString`, "F", 2)

let nation_indexed =
  sum(<i,_> <- range(nation.size))
    let n = <
      n_nationkey=nation.n_nationkey(i),
      n_name=nation.n_name(i),
      n_regionkey=nation.n_regionkey(i),
      n_comment=nation.n_comment(i)
    >
    if(n.n_name == saudi) then
      { unique(n.n_nationkey) -> < _ = n.n_nationkey > }
    else
      { }

let su_probed =
  sum(<i,_> <- range(supplier.size))
    let s = <
      s_suppkey=supplier.s_suppkey(i),
      s_name=supplier.s_name(i),
      s_address=supplier.s_address(i),
      s_nationkey=supplier.s_nationkey(i),
      s_phone=supplier.s_phone(i),
      s_acctbal=supplier.s_acctbal(i),
      s_comment=supplier.s_comment(i)
    >
    if(nation_indexed(s.s_nationkey) != {}) then
      { unique(s.s_suppkey) -> s.s_name }
    else
      { }

let ord_indexed =
  sum(<i,_> <- range(orders.size))
    let o = <
      o_orderkey=orders.o_orderkey(i),
      o_custkey=orders.o_custkey(i),
      o_orderstatus=orders.o_orderstatus(i),
      o_totalprice=orders.o_totalprice(i),
      o_orderdate=orders.o_orderdate(i),
      o_orderpriority=orders.o_orderpriority(i),
      o_clerk=orders.o_clerk(i),
      o_shippriority=orders.o_shippriority(i),
      o_comment=orders.o_comment(i)
    >
    if(o.o_orderstatus == f) then
      @vector { o.o_orderkey -> 1 }
    else
      { }

let l2_indexed =
  sum(<i,_> <- range(lineitem.size))
    let l = <
      l_orderkey=lineitem.l_orderkey(i),
      l_partkey=lineitem.l_partkey(i),
      l_suppkey=lineitem.l_suppkey(i),
      l_linenumber=lineitem.l_linenumber(i),
      l_quantity=lineitem.l_quantity(i),
      l_extendedprice=lineitem.l_extendedprice(i),
      l_discount=lineitem.l_discount(i),
      l_tax=lineitem.l_tax(i),
      l_returnflag=lineitem.l_returnflag(i),
      l_linestatus=lineitem.l_linestatus(i),
      l_shipdate=lineitem.l_shipdate(i),
      l_commitdate=lineitem.l_commitdate(i),
      l_receiptdate=lineitem.l_receiptdate(i),
      l_shipinstruct=lineitem.l_shipinstruct(i),
      l_shipmode=lineitem.l_shipmode(i),
      l_comment=lineitem.l_comment(i)
    >
    @vector { l.l_orderkey ->  @vector { l.l_suppkey -> 1 } }

let l3_indexed =
  sum(<i,_> <- range(lineitem.size))
    let l = <
      l_orderkey=lineitem.l_orderkey(i),
      l_partkey=lineitem.l_partkey(i),
      l_suppkey=lineitem.l_suppkey(i),
      l_linenumber=lineitem.l_linenumber(i),
      l_quantity=lineitem.l_quantity(i),
      l_extendedprice=lineitem.l_extendedprice(i),
      l_discount=lineitem.l_discount(i),
      l_tax=lineitem.l_tax(i),
      l_returnflag=lineitem.l_returnflag(i),
      l_linestatus=lineitem.l_linestatus(i),
      l_shipdate=lineitem.l_shipdate(i),
      l_commitdate=lineitem.l_commitdate(i),
      l_receiptdate=lineitem.l_receiptdate(i),
      l_shipinstruct=lineitem.l_shipinstruct(i),
      l_shipmode=lineitem.l_shipmode(i),
      l_comment=lineitem.l_comment(i)
    >
    if(l.l_commitdate < l.l_receiptdate) then
      @vector { l.l_orderkey ->  @vector { l.l_suppkey -> 1 } }
    else
      { }

let l1_probed =
  sum(<i,_> <- range(lineitem.size))
    let l = <
      l_orderkey=lineitem.l_orderkey(i),
      l_partkey=lineitem.l_partkey(i),
      l_suppkey=lineitem.l_suppkey(i),
      l_linenumber=lineitem.l_linenumber(i),
      l_quantity=lineitem.l_quantity(i),
      l_extendedprice=lineitem.l_extendedprice(i),
      l_discount=lineitem.l_discount(i),
      l_tax=lineitem.l_tax(i),
      l_returnflag=lineitem.l_returnflag(i),
      l_linestatus=lineitem.l_linestatus(i),
      l_shipdate=lineitem.l_shipdate(i),
      l_commitdate=lineitem.l_commitdate(i),
      l_receiptdate=lineitem.l_receiptdate(i),
      l_shipinstruct=lineitem.l_shipinstruct(i),
      l_shipmode=lineitem.l_shipmode(i),
      l_comment=lineitem.l_comment(i)
    >
    if(
      (l.l_commitdate < l.l_receiptdate) &&
      (su_probed(l.l_suppkey) != {}) &&
      (ord_indexed(l.l_orderkey) != {}) &&
      (1 < ext(`Size`, l2_indexed(l.l_orderkey))) &&
      (ext(`Size`, l3_indexed(l.l_orderkey)) <= 1)
    ) then
      { < name = su_probed(l.l_suppkey) > -> < numwait = 1> }
    else
      { }

sum(<k,v> <- l1_probed)
  { unique(concat(k,v)) -> 1 }
