let supplier = load[{<s_suppkey: int, s_name: string, s_address: string, s_nationkey: int, s_phone: string, s_acctbal: double, s_comment: string> -> int}]("datasets/tpch/supplier.tbl")

let partsupp = load[{<ps_partkey: int, ps_suppkey: int, ps_availqty: double, ps_supplycost: double, ps_comment: string> -> int}]("datasets/tpch/partsupp.tbl")

let nation = load[{<n_nationkey: int, n_name: string, n_regionkey: int, r_comment: string> -> int}]("datasets/tpch/nation.tbl")

let n_h =
  sum(<n,n_v> in nation)
    if(n.n_name == "GERMANY") then
      { n.n_nationkey -> < _ = n.n_nationkey > }
    else
      { }

let s_h =
  sum(<s,s_v> in supplier)
    if(s.s_nationkey ∈ n_h) then
      { s.s_suppkey -> true }
    else
      { }

// TODO aggregate into a tuple

let ps_h =
  sum(<ps,ps_v> in partsupp)
    if(ps.ps_suppkey ∈ s_h) then
      <
        _ = ps.ps_supplycost * ps.ps_availqty * 0.0001,
        _ = { ps.ps_partkey -> ps.ps_supplycost }
      >
    else
      { }
// TODO proper way but requires type inference backtracking
//      <
//        _ = 0.0,
//        _ = { }
//      >

sum(<ps_partkey,ps_supplycost> in ps_h(1))
  if(ps_h(0) < ps_supplycost) then
    { < _ = ps_partkey, _ = ps_supplycost > -> true }
  else
    { }
