let cc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, subject_id: @vec {int -> int}, status_id: @vec {int -> int}, size: int>]("datasets/job/complete_cast.csv")
let cc_offsets = ext(`SortedIndices`, cc.movie_id)
let cct1 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/20c/cct1.csv")
let cct1_offsets = ext(`SortedIndices`, cct1.id)
let cct2 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/20c/cct2.csv")
let cct2_offsets = ext(`SortedIndices`, cct2.id)
let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let mk_offsets = ext(`SortedIndices`, mk.movie_id)
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/20c/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let kt = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/20c/kt.csv")
let kt_offsets = ext(`SortedIndices`, kt.id)
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/20c/k.csv")
let k_offsets = ext(`SortedIndices`, k.id)
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/cast_info.csv")
let ci_offsets = ext(`SortedIndices`, ci.person_id)
let n = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> string}, gender: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/name.csv")
let n_offsets = ext(`SortedIndices`, n.id)
let chn = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> int}, name_pcode_cf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/20c/chn.csv")
let chn_offsets = ext(`SortedIndices`, chn.id)

timer

let cct1_trie0 = sum(<i, _> <- range(cct1.size)) @st(cct1.size) { cct1.id(cct1_offsets(i)) -> 1 } in
let cct2_trie0 = sum(<i, _> <- range(cct2.size)) @st(cct2.size) { cct2.id(cct2_offsets(i)) -> 1 } in
let interm0_unsort = sum(<cc_off, _> <- range(cc.size))
	let x0 = cc.subject_id(cc_off) in
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		let x1 = cc.status_id(cc_off) in
		if (x1 ∈ cct2_trie0) then
			let cct2_trie1 = cct2_trie0(x1) in
			@vec { <_col0=cc.movie_id(cc_off), col0=cc.subject_id(cc_off), col1=cc.status_id(cc_off), col2=cc.movie_id(cc_off)> -> 1 }
in

let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let kt_trie0 = sum(<i, _> <- range(kt.size)) @st(kt.size) { kt.id(kt_offsets(i)) -> 1 } in
let k_trie0 = sum(<i, _> <- range(k.size)) @st(k.size) { k.id(k_offsets(i)) -> 1 } in
let interm1_unsort = sum(<mk_off, _> <- range(mk.size))
	let x0 = mk.movie_id(mk_off) in
	if (x0 ∈ t_trie0) then
		let t_trie1 = t_trie0(x0) in
		sum(<t_i, _> <- t_trie1)
			let t_off = t_offsets(t_i)
			let x1 = t.kind_id(t_off) in
			if (x1 ∈ kt_trie0) then
				let kt_trie1 = kt_trie0(x1) in
				let x2 = mk.keyword_id(mk_off) in
				if (x2 ∈ k_trie0) then
					let k_trie1 = k_trie0(x2) in
					@vec { <col0=mk.movie_id(mk_off), col1=mk.keyword_id(mk_off), col2=t.kind_id(t_off), col3=t.title(t_off)> -> 1 }
in

let interm1 = ext(`SortedVec`, 0, interm1_unsort)
let interm1_trie0 = sum(<i, _> <- range(ext(`Size`, interm1))) @st(ext(`Size`, interm1)) { interm1(i).col0 -> @range { i -> 1 } } in

let interm0 = ext(`SortedVec`, 0, interm0_unsort)
let interm0_trie0 = sum(<i, _> <- range(ext(`Size`, interm0))) @st(ext(`Size`, interm0)) { interm0(i)._col0 -> @range { i -> 1 } } in

let chn_trie0 = sum(<i, _> <- range(chn.size)) @st(chn.size) { chn.id(chn_offsets(i)) -> 1 } in
let n_trie0 = sum(<i, _> <- range(n.size)) @st(n.size) { n.id(n_offsets(i)) -> @range { i -> 1 } } in
sum(<ci_off, _> <- range(ci.size))
	let x0 = ci.movie_id(ci_off) in
	if (x0 ∈ interm1_trie0) then
		if (x0 ∈ interm0_trie0) then
			let interm1_trie1 = interm1_trie0(x0) in
			let interm0_trie1 = interm0_trie0(x0) in
			let x1 = ci.person_role_id(ci_off) in
			if (x1 ∈ chn_trie0) then
				let chn_trie1 = chn_trie0(x1) in
				let x2 = ci.person_id(ci_off) in
				if (x2 ∈ n_trie0) then
					let n_trie1 = n_trie0(x2) in
					let mn_n = sum(<n_i, _> <- n_trie1) let n_off = n_offsets(n_i) in promote[min_sum](<name=n.name(n_off)>) in
					let mn_interm1 = sum(<interm1_off, _> <- interm1_trie1) let interm1_tuple = interm1(interm1_off) in promote[min_sum](<col3=interm1_tuple.col3>) in
					promote[min_sum](<col3=mn_n.name, col6=mn_interm1.col3>)

