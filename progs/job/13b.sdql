let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/13b/t.csv")
let miidx = load[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/movie_info_idx.csv")
let mi = load[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/movie_info.csv")
let mc = load[{<id: int, movie_id: int, company_id: int, company_type_id: int, note: string> -> int}]("datasets/job/movie_companies.csv")
let kt = load[{<id: int, kind: string> -> int}]("datasets/job/13b/kt.csv")
let it2 = load[{<id: int, info: string> -> int}]("datasets/job/13b/it2.csv")
let it = load[{<id: int, info: string> -> int}]("datasets/job/13b/it.csv")
let ct = load[{<id: int, kind: string> -> int}]("datasets/job/13b/ct.csv")
let cn = load[{<id: int, name: string, country_code: string, imdb_id: string, name_pcode_nf: string, name_pcode_sf: string, md5sum: string> -> int}]("datasets/job/13b/cn.csv")

let t_trie0 = sum(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple -> 1 } } in
let miidx_trie0 = sum(<miidx_tuple, _> <- miidx) { miidx_tuple.movie_id -> { miidx_tuple -> 1 } } in
let interm0_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ miidx_trie0) then
		let miidx_trie1 = miidx_trie0(x0) in
		sum(<t_tuple, _> <- t_trie1)
			sum(<miidx_tuple, _> <- miidx_trie1)
				{ t_tuple.id -> { t_tuple.kind_id -> { miidx_tuple.info_type_id -> { <col0=t_tuple.id, col1=t_tuple.title, col2=t_tuple.kind_id, col3=miidx_tuple.info, col4=miidx_tuple.info_type_id> -> 1 } } } }
	else
		{}
in

let mi_trie0 = sum(<mi_tuple, _> <- mi) { mi_tuple.movie_id -> { mi_tuple.info_type_id -> 1 } } in
let mc_trie0 = sum(<mc_tuple, _> <- mc) { mc_tuple.movie_id -> { mc_tuple.company_type_id -> { mc_tuple.company_id -> 1 } } } in
let kt_trie0 = sum(<kt_tuple, _> <- kt) { kt_tuple.id -> 1 } in
let it2_trie0 = sum(<it2_tuple, _> <- it2) { it2_tuple.id -> 1 } in
let it_trie0 = sum(<it_tuple, _> <- it) { it_tuple.id -> 1 } in
let ct_trie0 = sum(<ct_tuple, _> <- ct) { ct_tuple.id -> 1 } in
let cn_trie0 = sum(<cn_tuple, _> <- cn) { cn_tuple.id -> { cn_tuple -> 1 } } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm0_trie0) then
		if (x0 ∈ mc_trie0) then
			let interm0_trie1 = interm0_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			sum(<x1, interm0_trie2> <- interm0_trie1)
				if (x1 ∈ kt_trie0) then
					let kt_trie1 = kt_trie0(x1) in
					sum(<x2, mi_trie2> <- mi_trie1)
						if (x2 ∈ it2_trie0) then
							let it2_trie1 = it2_trie0(x2) in
							sum(<x3, interm0_trie3> <- interm0_trie2)
								if (x3 ∈ it_trie0) then
									let it_trie1 = it_trie0(x3) in
									sum(<x4, mc_trie2> <- mc_trie1)
										if (x4 ∈ ct_trie0) then
											let ct_trie1 = ct_trie0(x4) in
											sum(<x5, mc_trie3> <- mc_trie2)
												if (x5 ∈ cn_trie0) then
													let cn_trie1 = cn_trie0(x5) in
													let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie3) <col1=interm0_tuple.col1, col3=interm0_tuple.col3> in
													let mn_cn = sum(<cn_tuple, _> <- cn_trie1) <name=cn_tuple.name> in
													<col4=mn_interm0.col1, col5=mn_interm0.col3, col8=mn_cn.name>
												else
													<col4="", col5="", col8="">
										else
											{}
								else
									{}
						else
							{}
				else
					{}
		else
			{}
	else
		{}

