let cc = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, subject_id: @vector {int -> int}, status_id: @vector {int -> int}, size: int>]("datasets/job/complete_cast.csv")
let cct1 = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/29c/cct1.csv")
let cct2 = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/29c/cct2.csv")
let t = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/29c/t.csv")
let mc = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, company_id: @vector {int -> int}, company_type_id: @vector {int -> int}, note: @vector {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let cn = load[<id: @vector {int -> int}, name: @vector {int -> string}, country_code: @vector {int -> string}, imdb_id: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, name_pcode_sf: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/29c/cn.csv")
let mk = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, keyword_id: @vector {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let k = load[<id: @vector {int -> int}, keyword: @vector {int -> string}, phonetic_code: @vector {int -> string}, size: int>]("datasets/job/29c/k.csv")
let mi = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/29c/mi.csv")
let it = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/29c/it.csv")
let pi = load[<id: @vector {int -> int}, person_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/person_info.csv")
let an = load[<id: @vector {int -> int}, person_id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, name_pcode_cf: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/aka_name.csv")
let it3 = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/29c/it3.csv")
let n = load[<id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, imdb_id: @vector {int -> string}, gender: @vector {int -> string}, name_pcode_cf: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/29c/n.csv")
let ci = load[<id: @vector {int -> int}, person_id: @vector {int -> int}, movie_id: @vector {int -> int}, person_role_id: @vector {int -> int}, note: @vector {int -> string}, nr_order: @vector {int -> int}, role_id: @vector {int -> int}, size: int>]("datasets/job/29c/ci.csv")
let chn = load[<id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, imdb_id: @vector {int -> int}, name_pcode_cf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/char_name.csv")
let rt = load[<id: @vector {int -> int}, role: @vector {int -> string}, size: int>]("datasets/job/29c/rt.csv")

let cc_trie0 = sum(<i,_> <- range(cc.size)) { cc.subject_id(i) -> { cc.status_id(i) -> @vecdict { i -> 1 } } } in
let cct1_trie0 = sum(<i,_> <- range(cct1.size)) { cct1.id(i) -> @vecdict { i -> 1 } } in
let cct2_trie0 = sum(<i,_> <- range(cct2.size)) { cct2.id(i) -> @vecdict { i -> 1 } } in
let interm0_trie0 = sum(<x0, cc_trie1> <- cc_trie0)
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		sum(<x1, cc_trie2> <- cc_trie1)
			if (x1 ∈ cct2_trie0) then
				let cct2_trie1 = cct2_trie0(x1) in
				sum(<i, _> <- cc_trie2)
					{ cc.movie_id(i) -> @vecs { <col0=cc.subject_id(i), col1=cc.status_id(i), col2=cc.movie_id(i)> -> 1 } }
in

let t_trie0 = sum(<i,_> <- range(t.size)) { t.id(i) -> @vecdict { i -> 1 } } in
let interm1_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<i, _> <- t_trie1)
			{ t.id(i) -> @vecs { <col0=t.id(i), col1=t.title(i)> -> 1 } }
in

let mc_trie0 = sum(<i,_> <- range(mc.size)) { mc.company_id(i) -> { mc.movie_id(i) -> @vecdict { i -> 1 } } } in
let cn_trie0 = sum(<i,_> <- range(cn.size)) { cn.id(i) -> @vecdict { i -> 1 } } in
let interm2_trie0 = sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ cn_trie0) then
		let cn_trie1 = cn_trie0(x0) in
		sum(<x1, mc_trie2> <- mc_trie1)
			if (x1 ∈ interm1_trie0) then
				let interm1_trie1 = interm1_trie0(x1) in
				sum(<i, _> <- mc_trie2)
					sum(<interm1_tuple, _> <- interm1_trie1)
						{ mc.movie_id(i) -> @vecs { <col0=mc.company_id(i), col1=mc.movie_id(i), col2=interm1_tuple.col1> -> 1 } }
in

let mk_trie0 = sum(<i,_> <- range(mk.size)) { mk.keyword_id(i) -> { mk.movie_id(i) -> @vecdict { i -> 1 } } } in
let k_trie0 = sum(<i,_> <- range(k.size)) { k.id(i) -> @vecdict { i -> 1 } } in
let interm3_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		sum(<x1, mk_trie2> <- mk_trie1)
			if (x1 ∈ interm2_trie0) then
				let interm2_trie1 = interm2_trie0(x1) in
				sum(<i, _> <- mk_trie2)
					sum(<interm2_tuple, _> <- interm2_trie1)
						{ mk.movie_id(i) -> @vecs { <col0=mk.keyword_id(i), col1=mk.movie_id(i), col3=interm2_tuple.col2> -> 1 } }
in

let mi_trie0 = sum(<i,_> <- range(mi.size)) { mi.info_type_id(i) -> { mi.movie_id(i) -> @vecdict { i -> 1 } } } in
let it_trie0 = sum(<i,_> <- range(it.size)) { it.id(i) -> @vecdict { i -> 1 } } in
let interm4_trie0 = sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ it_trie0) then
		let it_trie1 = it_trie0(x0) in
		sum(<x1, mi_trie2> <- mi_trie1)
			if (x1 ∈ interm3_trie0) then
				let interm3_trie1 = interm3_trie0(x1) in
				sum(<i, _> <- mi_trie2)
					sum(<interm3_tuple, _> <- interm3_trie1)
						{ mi.movie_id(i) -> @vecs { <col0=mi.info_type_id(i), col1=mi.movie_id(i), col4=interm3_tuple.col3> -> 1 } }
in

let pi_trie0 = sum(<i,_> <- range(pi.size)) { pi.person_id(i) -> { pi.info_type_id(i) -> @vecdict { i -> 1 } } } in
let an_trie0 = sum(<i,_> <- range(an.size)) { an.person_id(i) -> @vecdict { i -> 1 } } in
let it3_trie0 = sum(<i,_> <- range(it3.size)) { it3.id(i) -> @vecdict { i -> 1 } } in
let interm5_trie0 = sum(<x0, pi_trie1> <- pi_trie0)
	if (x0 ∈ an_trie0) then
		let an_trie1 = an_trie0(x0) in
		sum(<x1, pi_trie2> <- pi_trie1)
			if (x1 ∈ it3_trie0) then
				let it3_trie1 = it3_trie0(x1) in
				sum(<i, _> <- pi_trie2)
					{ pi.person_id(i) -> @vecs { <col0=pi.person_id(i), col1=pi.info_type_id(i)> -> 1 } }
in

let n_trie0 = sum(<i,_> <- range(n.size)) { n.id(i) -> @vecdict { i -> 1 } } in
let interm6_trie0 = sum(<x0, n_trie1> <- n_trie0)
	if (x0 ∈ interm5_trie0) then
		let interm5_trie1 = interm5_trie0(x0) in
		sum(<i, _> <- n_trie1)
			{ n.id(i) -> @vecs { <col0=n.id(i), col1=n.name(i)> -> 1 } }
in

let ci_trie0 = sum(<i,_> <- range(ci.size)) { ci.person_role_id(i) -> { ci.role_id(i) -> { ci.person_id(i) -> { ci.movie_id(i) -> 1 } } } } in
let chn_trie0 = sum(<i,_> <- range(chn.size)) { chn.id(i) -> @vecdict { i -> 1 } } in
let rt_trie0 = sum(<i,_> <- range(rt.size)) { rt.id(i) -> 1 } in
sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ chn_trie0) then
		let chn_trie1 = chn_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ rt_trie0) then
				let rt_trie1 = rt_trie0(x1) in
				sum(<x2, ci_trie3> <- ci_trie2)
					if (x2 ∈ interm6_trie0) then
						let interm6_trie1 = interm6_trie0(x2) in
						sum(<x3, ci_trie4> <- ci_trie3)
							if (x3 ∈ interm4_trie0) then
								let interm4_trie1 = interm4_trie0(x3) in
								let mn_chn = sum(<i, _> <- chn_trie1) promote[min_sum](<name=chn.name(i)>) in
								let mn_interm6 = sum(<interm6_tuple, _> <- interm6_trie1) promote[min_sum](<col1=interm6_tuple.col1>) in
								let mn_interm4 = sum(<interm4_tuple, _> <- interm4_trie1) promote[min_sum](<col4=interm4_tuple.col4>) in
								promote[min_sum](<col4=mn_chn.name, col5=mn_interm6.col1, col10=mn_interm4.col4>)
