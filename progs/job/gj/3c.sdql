let mk = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, keyword_id: @vector {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let t = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/3c/t.csv")
let mi = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/3c/mi.csv")
let k = load[<id: @vector {int -> int}, keyword: @vector {int -> string}, phonetic_code: @vector {int -> string}, size: int>]("datasets/job/3c/k.csv")

let mk_trie0 = sum(<i,_> <- range(mk.size)) { mk.movie_id(i) -> @vecdict { i -> 1 } } in
let t_trie0 = sum(<i,_> <- range(t.size)) { t.id(i) -> @vecdict { i -> 1 } } in
let interm0_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ t_trie0) then
		let t_trie1 = t_trie0(x0) in
		sum(<i, _> <- mk_trie1)
			sum(<j, _> <- t_trie1)
				{ mk.movie_id(i) -> { mk.keyword_id(i) -> @vecs { <col0=mk.movie_id(i), col1=mk.keyword_id(i), col2=t.title(j)> -> 1 } } }
in

let mi_trie0 = sum(<i,_> <- range(mi.size)) { mi.movie_id(i) -> 1 } in
let k_trie0 = sum(<i,_> <- range(k.size)) { k.id(i) -> 1 } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<x1, interm0_trie2> <- interm0_trie1)
			if (x1 ∈ k_trie0) then
				let k_trie1 = k_trie0(x1) in
				let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie2) promote[min_sum](<col2=interm0_tuple.col2>) in
				promote[min_sum](<col2=mn_interm0.col2>)
