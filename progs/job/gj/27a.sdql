let ml = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, linked_movie_id: @vec {int -> int}, link_type_id: @vec {int -> int}, size: int>]("datasets/job/movie_link.csv")
let lt = load[<id: @vec {int -> int}, link: @vec {int -> string}, size: int>]("datasets/job/27a/lt.csv")
let cc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, subject_id: @vec {int -> int}, status_id: @vec {int -> int}, size: int>]("datasets/job/complete_cast.csv")
let cct1 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/27a/cct1.csv")
let cct2 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/27a/cct2.csv")
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/27a/t.csv")
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/27a/mc.csv")
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/27a/ct.csv")
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/27a/cn.csv")
let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/27a/k.csv")
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/27a/mi.csv")

let ml_trie0 = sum(<i,_> <- range(ml.size)) { ml.link_type_id(i) -> @vecdict { i -> 1 } } in
let lt_trie0 = sum(<i,_> <- range(lt.size)) { lt.id(i) -> @vecdict { i -> 1 } } in
let interm0_trie0 = sum(<x0, ml_trie1> <- ml_trie0)
	if (x0 ∈ lt_trie0) then
		let lt_trie1 = lt_trie0(x0) in
		sum(<i, _> <- ml_trie1)
			sum(<j, _> <- lt_trie1)
				{ ml.movie_id(i) -> @vecs { <col0=ml.link_type_id(i), col1=ml.movie_id(i), col2=lt.link(j)> -> 1 } }
in

let cc_trie0 = sum(<i,_> <- range(cc.size)) { cc.subject_id(i) -> { cc.status_id(i) -> { cc.movie_id(i) -> @vecdict { i -> 1 } } } } in
let cct1_trie0 = sum(<i,_> <- range(cct1.size)) { cct1.id(i) -> @vecdict { i -> 1 } } in
let cct2_trie0 = sum(<i,_> <- range(cct2.size)) { cct2.id(i) -> @vecdict { i -> 1 } } in
let interm1_trie0 = sum(<x0, cc_trie1> <- cc_trie0)
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		sum(<x1, cc_trie2> <- cc_trie1)
			if (x1 ∈ cct2_trie0) then
				let cct2_trie1 = cct2_trie0(x1) in
				sum(<x2, cc_trie3> <- cc_trie2)
					if (x2 ∈ interm0_trie0) then
						let interm0_trie1 = interm0_trie0(x2) in
						sum(<i, _> <- cc_trie3)
							sum(<interm0_tuple, _> <- interm0_trie1)
								{ cc.movie_id(i) -> @vecs { <col0=cc.subject_id(i), col1=cc.status_id(i), col2=cc.movie_id(i), col4=interm0_tuple.col2> -> 1 } }
in

let t_trie0 = sum(<i,_> <- range(t.size)) { t.id(i) -> @vecdict { i -> 1 } } in
let interm2_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		sum(<i, _> <- t_trie1)
			sum(<interm1_tuple, _> <- interm1_trie1)
				{ t.id(i) -> @vecs { <col0=t.id(i), col1=t.title(i), col5=interm1_tuple.col4> -> 1 } }
in

let mc_trie0 = sum(<i,_> <- range(mc.size)) { mc.company_type_id(i) -> { mc.company_id(i) -> { mc.movie_id(i) -> @vecdict { i -> 1 } } } } in
let ct_trie0 = sum(<i,_> <- range(ct.size)) { ct.id(i) -> @vecdict { i -> 1 } } in
let cn_trie0 = sum(<i,_> <- range(cn.size)) { cn.id(i) -> @vecdict { i -> 1 } } in
let interm3_trie0 = sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ ct_trie0) then
		let ct_trie1 = ct_trie0(x0) in
		sum(<x1, mc_trie2> <- mc_trie1)
			if (x1 ∈ cn_trie0) then
				let cn_trie1 = cn_trie0(x1) in
				sum(<x2, mc_trie3> <- mc_trie2)
					if (x2 ∈ interm2_trie0) then
						let interm2_trie1 = interm2_trie0(x2) in
						sum(<i, _> <- mc_trie3)
							sum(<j, _> <- cn_trie1)
								sum(<interm2_tuple, _> <- interm2_trie1)
									{ mc.movie_id(i) -> @vecs { <col0=mc.company_type_id(i), col1=mc.company_id(i), col2=mc.movie_id(i), col3=cn.name(j), col4=interm2_tuple.col1, col8=interm2_tuple.col5> -> 1 } }
in

let mk_trie0 = sum(<i,_> <- range(mk.size)) { mk.keyword_id(i) -> { mk.movie_id(i) -> @vecdict { i -> 1 } } } in
let k_trie0 = sum(<i,_> <- range(k.size)) { k.id(i) -> @vecdict { i -> 1 } } in
let interm4_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		sum(<x1, mk_trie2> <- mk_trie1)
			if (x1 ∈ interm3_trie0) then
				let interm3_trie1 = interm3_trie0(x1) in
				sum(<i, _> <- mk_trie2)
					sum(<interm3_tuple, _> <- interm3_trie1)
						{ mk.movie_id(i) -> @vecs { <col0=mk.keyword_id(i), col1=mk.movie_id(i), col4=interm3_tuple.col3, col5=interm3_tuple.col4, col9=interm3_tuple.col8> -> 1 } }
in

let mi_trie0 = sum(<i,_> <- range(mi.size)) { mi.movie_id(i) -> 1 } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm4_trie0) then
		let interm4_trie1 = interm4_trie0(x0) in
		let mn_interm4 = sum(<interm4_tuple, _> <- interm4_trie1) promote[min_sum](<col4=interm4_tuple.col4, col5=interm4_tuple.col5, col9=interm4_tuple.col9>) in
		promote[min_sum](<col4=mn_interm4.col4, col5=mn_interm4.col5, col9=mn_interm4.col9>)
