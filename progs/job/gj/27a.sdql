let ml = load[{<id: int, movie_id: int, linked_movie_id: int, link_type_id: int> -> int}]("datasets/job/movie_link.csv")
let lt = load[{<id: int, link: string> -> int}]("datasets/job/27a/lt.csv")
let cc = load[{<id: int, movie_id: int, subject_id: int, status_id: int> -> int}]("datasets/job/complete_cast.csv")
let cct1 = load[{<id: int, kind: string> -> int}]("datasets/job/27a/cct1.csv")
let cct2 = load[{<id: int, kind: string> -> int}]("datasets/job/27a/cct2.csv")
let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/27a/t.csv")
let mc = load[{<id: int, movie_id: int, company_id: int, company_type_id: int, note: string> -> int}]("datasets/job/27a/mc.csv")
let ct = load[{<id: int, kind: string> -> int}]("datasets/job/27a/ct.csv")
let cn = load[{<id: int, name: string, country_code: string, imdb_id: string, name_pcode_nf: string, name_pcode_sf: string, md5sum: string> -> int}]("datasets/job/27a/cn.csv")
let mk = load[{<id: int, movie_id: int, keyword_id: int> -> int}]("datasets/job/movie_keyword.csv")
let k = load[{<id: int, keyword: string, phonetic_code: string> -> int}]("datasets/job/27a/k.csv")
let mi = load[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/27a/mi.csv")

let ml_trie0 = sum_vec(<ml_tuple, _> <- ml) { ml_tuple.link_type_id -> { ml_tuple -> 1 } } in
let lt_trie0 = sum_vec(<lt_tuple, _> <- lt) { lt_tuple.id -> { lt_tuple -> 1 } } in
let interm0_trie0 = sum_vec(<x0, ml_trie1> <- ml_trie0)
	if (x0 ∈ lt_trie0) then
		let lt_trie1 = lt_trie0(x0) in
		sum_vec(<ml_tuple, _> <- ml_trie1)
			sum_vec(<lt_tuple, _> <- lt_trie1)
				{ ml_tuple.movie_id -> { <col0=ml_tuple.link_type_id, col1=ml_tuple.movie_id, col2=lt_tuple.link> -> 1 } }
	else
		{}
in

let cc_trie0 = sum_vec(<cc_tuple, _> <- cc) { cc_tuple.subject_id -> { cc_tuple.status_id -> { cc_tuple.movie_id -> { cc_tuple -> 1 } } } } in
let cct1_trie0 = sum_vec(<cct1_tuple, _> <- cct1) { cct1_tuple.id -> { cct1_tuple -> 1 } } in
let cct2_trie0 = sum_vec(<cct2_tuple, _> <- cct2) { cct2_tuple.id -> { cct2_tuple -> 1 } } in
let interm1_trie0 = sum_vec(<x0, cc_trie1> <- cc_trie0)
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		sum_vec(<x1, cc_trie2> <- cc_trie1)
			if (x1 ∈ cct2_trie0) then
				let cct2_trie1 = cct2_trie0(x1) in
				sum_vec(<x2, cc_trie3> <- cc_trie2)
					if (x2 ∈ interm0_trie0) then
						let interm0_trie1 = interm0_trie0(x2) in
						sum_vec(<cc_tuple, _> <- cc_trie3)
							sum_vec(<interm0_tuple, _> <- interm0_trie1)
								{ cc_tuple.movie_id -> { <col0=cc_tuple.subject_id, col1=cc_tuple.status_id, col2=cc_tuple.movie_id, col4=interm0_tuple.col2> -> 1 } }
					else
						{}
			else
				{}
	else
		{}
in

let t_trie0 = sum_vec(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple -> 1 } } in
let interm2_trie0 = sum_vec(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		sum_vec(<t_tuple, _> <- t_trie1)
			sum_vec(<interm1_tuple, _> <- interm1_trie1)
				{ t_tuple.id -> { <col0=t_tuple.id, col1=t_tuple.title, col5=interm1_tuple.col4> -> 1 } }
	else
		{}
in

let mc_trie0 = sum_vec(<mc_tuple, _> <- mc) { mc_tuple.company_type_id -> { mc_tuple.company_id -> { mc_tuple.movie_id -> { mc_tuple -> 1 } } } } in
let ct_trie0 = sum_vec(<ct_tuple, _> <- ct) { ct_tuple.id -> { ct_tuple -> 1 } } in
let cn_trie0 = sum_vec(<cn_tuple, _> <- cn) { cn_tuple.id -> { cn_tuple -> 1 } } in
let interm3_trie0 = sum_vec(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ ct_trie0) then
		let ct_trie1 = ct_trie0(x0) in
		sum_vec(<x1, mc_trie2> <- mc_trie1)
			if (x1 ∈ cn_trie0) then
				let cn_trie1 = cn_trie0(x1) in
				sum_vec(<x2, mc_trie3> <- mc_trie2)
					if (x2 ∈ interm2_trie0) then
						let interm2_trie1 = interm2_trie0(x2) in
						sum_vec(<mc_tuple, _> <- mc_trie3)
							sum_vec(<cn_tuple, _> <- cn_trie1)
								sum_vec(<interm2_tuple, _> <- interm2_trie1)
									{ mc_tuple.movie_id -> { <col0=mc_tuple.company_type_id, col1=mc_tuple.company_id, col2=mc_tuple.movie_id, col3=cn_tuple.name, col4=interm2_tuple.col1, col8=interm2_tuple.col5> -> 1 } }
					else
						{}
			else
				{}
	else
		{}
in

let mk_trie0 = sum_vec(<mk_tuple, _> <- mk) { mk_tuple.keyword_id -> { mk_tuple.movie_id -> { mk_tuple -> 1 } } } in
let k_trie0 = sum_vec(<k_tuple, _> <- k) { k_tuple.id -> { k_tuple -> 1 } } in
let interm4_trie0 = sum_vec(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		sum_vec(<x1, mk_trie2> <- mk_trie1)
			if (x1 ∈ interm3_trie0) then
				let interm3_trie1 = interm3_trie0(x1) in
				sum_vec(<mk_tuple, _> <- mk_trie2)
					sum_vec(<interm3_tuple, _> <- interm3_trie1)
						{ mk_tuple.movie_id -> { <col0=mk_tuple.keyword_id, col1=mk_tuple.movie_id, col4=interm3_tuple.col3, col5=interm3_tuple.col4, col9=interm3_tuple.col8> -> 1 } }
			else
				{}
	else
		{}
in

let mi_trie0 = min(<mi_tuple, _> <- mi) { mi_tuple.movie_id -> 1 } in
min(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm4_trie0) then
		let interm4_trie1 = interm4_trie0(x0) in
		let mn_interm4 = min(<interm4_tuple, _> <- interm4_trie1) <col4=interm4_tuple.col4, col5=interm4_tuple.col5, col9=interm4_tuple.col9> in
		<col4=mn_interm4.col4, col5=mn_interm4.col5, col9=mn_interm4.col9>
	else
		<>
