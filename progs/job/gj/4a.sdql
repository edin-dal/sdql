let mk = load[{<id: int, movie_id: int, keyword_id: int> -> int}]("datasets/job/movie_keyword.csv")
let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/4a/t.csv")
let mi_idx = load[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/4a/mi_idx.csv")
let k = load[{<id: int, keyword: string, phonetic_code: string> -> int}]("datasets/job/4a/k.csv")
let it = load[{<id: int, info: string> -> int}]("datasets/job/4a/it.csv")

let mk_trie0 = sum(<mk_tuple, _> <- mk) { mk_tuple.movie_id -> { mk_tuple.keyword_id -> 1 } } in
let t_trie0 = sum_vec(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple -> 1 } } in
let mi_idx_trie0 = sum_vec(<mi_idx_tuple, _> <- mi_idx) { mi_idx_tuple.movie_id -> { mi_idx_tuple.info_type_id -> { mi_idx_tuple -> 1 } } } in
let k_trie0 = sum(<k_tuple, _> <- k) { k_tuple.id -> 1 } in
let it_trie0 = sum(<it_tuple, _> <- it) { it_tuple.id -> 1 } in
sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ t_trie0) then
		if (x0 ∈ mi_idx_trie0) then
			let t_trie1 = t_trie0(x0) in
			let mi_idx_trie1 = mi_idx_trie0(x0) in
			sum(<x1, mk_trie2> <- mk_trie1)
				if (x1 ∈ k_trie0) then
					let k_trie1 = k_trie0(x1) in
					sum(<x2, mi_idx_trie2> <- mi_idx_trie1)
						if (x2 ∈ it_trie0) then
							let it_trie1 = it_trie0(x2) in
							let mn_t = sum(<t_tuple, _> <- t_trie1) promote[min_sum](<title=t_tuple.title>) in
							let mn_mi_idx = sum(<mi_idx_tuple, _> <- mi_idx_trie2) promote[min_sum](<info=mi_idx_tuple.info>) in
							promote[min_sum](<col2=mn_t.title, col4=mn_mi_idx.info>)
