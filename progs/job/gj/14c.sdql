let mk = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, keyword_id: @vector {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let t = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/14c/t.csv")
let mi_idx = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/14c/mi_idx.csv")
let mi = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/14c/mi.csv")
let kt = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/14c/kt.csv")
let k = load[<id: @vector {int -> int}, keyword: @vector {int -> string}, phonetic_code: @vector {int -> string}, size: int>]("datasets/job/14c/k.csv")
let it2 = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/14c/it2.csv")
let it1 = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/14c/it1.csv")

let mk_trie0 =
	sum(<i,_> <- range(mk.size))
		let mk_tuple = <
			id=mk.id(i),
			movie_id=mk.movie_id(i),
			keyword_id=mk.keyword_id(i)
		>
		{ mk_tuple.movie_id -> @vecdict { mk_tuple -> 1 } } in

let t_trie0 =
	sum(<i,_> <- range(t.size))
		let t_tuple = <
			id=t.id(i),
			title=t.title(i),
			imdb_index=t.imdb_index(i),
			kind_id=t.kind_id(i),
			production_year=t.production_year(i),
			imdb_id=t.imdb_id(i),
			phonetic_code=t.phonetic_code(i),
			episode_of_id=t.episode_of_id(i),
			season_nr=t.season_nr(i),
			episode_nr=t.episode_nr(i),
			series_years=t.series_years(i),
			md5sum=t.md5sum(i)
		>
		{ t_tuple.id -> @vecdict { t_tuple -> 1 } } in

let mi_idx_trie0 =
	sum(<i,_> <- range(mi_idx.size))
		let mi_idx_tuple = <
			id=mi_idx.id(i),
			movie_id=mi_idx.movie_id(i),
			info_type_id=mi_idx.info_type_id(i),
			info=mi_idx.info(i),
			note=mi_idx.note(i)
		>
		{ mi_idx_tuple.movie_id -> @vecdict { mi_idx_tuple -> 1 } } in

let interm0_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ t_trie0) then
		if (x0 ∈ mi_idx_trie0) then
			let t_trie1 = t_trie0(x0) in
			let mi_idx_trie1 = mi_idx_trie0(x0) in
			sum(<mk_tuple, _> <- mk_trie1)
				sum(<t_tuple, _> <- t_trie1)
					sum(<mi_idx_tuple, _> <- mi_idx_trie1)
						{ mk_tuple.movie_id -> { t_tuple.kind_id -> { mk_tuple.keyword_id -> { mi_idx_tuple.info_type_id -> @vecdict { <col0=mk_tuple.movie_id, col1=mk_tuple.keyword_id, col2=t_tuple.title, col3=t_tuple.kind_id, col4=mi_idx_tuple.info_type_id, col5=mi_idx_tuple.info> -> 1 } } } } }
in

let mi_trie0 =
	sum(<i,_> <- range(mi.size))
		let mi_tuple = <
			id=mi.id(i),
			movie_id=mi.movie_id(i),
			info_type_id=mi.info_type_id(i),
			info=mi.info(i),
			note=mi.note(i)
		>
		{ mi_tuple.movie_id -> { mi_tuple.info_type_id -> 1 } } in

let kt_trie0 =
	sum(<i,_> <- range(kt.size))
		let kt_tuple = <
			id=kt.id(i),
			kind=kt.kind(i)
		>
		{ kt_tuple.id -> 1 } in

let k_trie0 =
	sum(<i,_> <- range(k.size))
		let k_tuple = <
			id=k.id(i),
			keyword=k.keyword(i),
			phonetic_code=k.phonetic_code(i)
		>
		{ k_tuple.id -> 1 } in

let it2_trie0 =
	sum(<i,_> <- range(it2.size))
		let it2_tuple = <
			id=it2.id(i),
			info=it2.info(i)
		>
		{ it2_tuple.id -> 1 } in

let it1_trie0 =
	sum(<i,_> <- range(it1.size))
		let it1_tuple = <
			id=it1.id(i),
			info=it1.info(i)
		>
		{ it1_tuple.id -> 1 } in

sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<x1, interm0_trie2> <- interm0_trie1)
			if (x1 ∈ kt_trie0) then
				let kt_trie1 = kt_trie0(x1) in
				sum(<x2, interm0_trie3> <- interm0_trie2)
					if (x2 ∈ k_trie0) then
						let k_trie1 = k_trie0(x2) in
						sum(<x3, interm0_trie4> <- interm0_trie3)
							if (x3 ∈ it2_trie0) then
								let it2_trie1 = it2_trie0(x3) in
								sum(<x4, mi_trie2> <- mi_trie1)
									if (x4 ∈ it1_trie0) then
										let it1_trie1 = it1_trie0(x4) in
										let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie4) promote[min_sum](<col2=interm0_tuple.col2, col5=interm0_tuple.col5>) in
										promote[min_sum](<col5=mn_interm0.col2, col6=mn_interm0.col5>)
