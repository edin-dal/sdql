let t = load_cstore[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/1b/t.csv")
let mi_idx = load_cstore[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/movie_info_idx.csv")
let mc = load_cstore[{<id: int, movie_id: int, company_id: int, company_type_id: int, note: string> -> int}]("datasets/job/1b/mc.csv")
let it = load_cstore[{<id: int, info: string> -> int}]("datasets/job/1b/it.csv")
let ct = load_cstore[{<id: int, kind: string> -> int}]("datasets/job/1b/ct.csv")

let t_trie0 =
	sum(<i,_> <- range(t.size))
		let t_tuple = <
			id=t.id(i),
			title=t.title(i),
			imdb_index=t.imdb_index(i),
			kind_id=t.kind_id(i),
			production_year=t.production_year(i),
			imdb_id=t.imdb_id(i),
			phonetic_code=t.phonetic_code(i),
			episode_of_id=t.episode_of_id(i),
			season_nr=t.season_nr(i),
			episode_nr=t.episode_nr(i),
			series_years=t.series_years(i),
			md5sum=t.md5sum(i)
		>
		{ t_tuple.id -> @vecdict { t_tuple -> 1 } } in

let mi_idx_trie0 =
	sum(<i,_> <- range(mi_idx.size))
		let mi_idx_tuple = <
			id=mi_idx.id(i),
			movie_id=mi_idx.movie_id(i),
			info_type_id=mi_idx.info_type_id(i),
			info=mi_idx.info(i),
			note=mi_idx.note(i)
		>
		{ mi_idx_tuple.movie_id -> @vecdict { mi_idx_tuple -> 1 } } in

let interm0_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ mi_idx_trie0) then
		let mi_idx_trie1 = mi_idx_trie0(x0) in
		sum(<t_tuple, _> <- t_trie1)
			sum(<mi_idx_tuple, _> <- mi_idx_trie1)
				{ t_tuple.id -> { mi_idx_tuple.info_type_id -> @vecdict { <col0=t_tuple.id, col1=t_tuple.title, col2=t_tuple.production_year, col3=mi_idx_tuple.info_type_id> -> 1 } } }
in

let mc_trie0 =
	sum(<i,_> <- range(mc.size))
		let mc_tuple = <
			id=mc.id(i),
			movie_id=mc.movie_id(i),
			company_id=mc.company_id(i),
			company_type_id=mc.company_type_id(i),
			note=mc.note(i)
		>
		{ mc_tuple.movie_id -> { mc_tuple.company_type_id -> @vecdict { mc_tuple -> 1 } } } in

let it_trie0 =
	sum(<i,_> <- range(it.size))
		let it_tuple = <
			id=it.id(i),
			info=it.info(i)
		>
		{ it_tuple.id -> 1 } in

let ct_trie0 =
	sum(<i,_> <- range(ct.size))
		let ct_tuple = <
			id=ct.id(i),
			kind=ct.kind(i)
		>
		{ ct_tuple.id -> 1 } in

sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<x1, interm0_trie2> <- interm0_trie1)
			if (x1 ∈ it_trie0) then
				let it_trie1 = it_trie0(x1) in
				sum(<x2, mc_trie2> <- mc_trie1)
					if (x2 ∈ ct_trie0) then
						let ct_trie1 = ct_trie0(x2) in
						let mn_mc = sum(<mc_tuple, _> <- mc_trie2) promote[min_sum](<note=mc_tuple.note>) in
						let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie2) promote[min_sum](<col1=interm0_tuple.col1, col2=interm0_tuple.col2>) in
						promote[min_sum](<col2=mn_mc.note, col4=mn_interm0.col1, col5=mn_interm0.col2>)
