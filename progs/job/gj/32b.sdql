let t1 = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/title.csv")
let ml = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, linked_movie_id: @vector {int -> int}, link_type_id: @vector {int -> int}, size: int>]("datasets/job/movie_link.csv")
let t2 = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/title.csv")
let mk = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, keyword_id: @vector {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let lt = load[<id: @vector {int -> int}, link: @vector {int -> string}, size: int>]("datasets/job/link_type.csv")
let k = load[<id: @vector {int -> int}, keyword: @vector {int -> string}, phonetic_code: @vector {int -> string}, size: int>]("datasets/job/32b/k.csv")

let t1_trie0 = sum(<i,_> <- range(t1.size)) { t1.id(i) -> @vecdict { i -> 1 } } in
let ml_trie0 = sum(<i,_> <- range(ml.size)) { ml.movie_id(i) -> { ml.linked_movie_id(i) -> @vecdict { i -> 1 } } } in
let t2_trie0 = sum(<i,_> <- range(t2.size)) { t2.id(i) -> @vecdict { i -> 1 } } in
let interm0_trie0 = sum(<x0, t1_trie1> <- t1_trie0)
	if (x0 ∈ ml_trie0) then
		let ml_trie1 = ml_trie0(x0) in
		sum(<x1, ml_trie2> <- ml_trie1)
			if (x1 ∈ t2_trie0) then
				let t2_trie1 = t2_trie0(x1) in
				sum(<i, _> <- t1_trie1)
					sum(<j, _> <- ml_trie2)
						sum(<k, _> <- t2_trie1)
							{ t1.id(i) -> { ml.link_type_id(j) -> @vecs { <col0=t1.id(i), col1=t1.title(i), col2=ml.linked_movie_id(j), col3=ml.link_type_id(j), col4=t2.title(k)> -> 1 } } }
in

let mk_trie0 = sum(<i,_> <- range(mk.size)) { mk.movie_id(i) -> { mk.keyword_id(i) -> 1 } } in
let lt_trie0 = sum(<i,_> <- range(lt.size)) { lt.id(i) -> @vecdict { i -> 1 } } in
let k_trie0 = sum(<i,_> <- range(k.size)) { k.id(i) -> 1 } in
sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<x1, interm0_trie2> <- interm0_trie1)
			if (x1 ∈ lt_trie0) then
				let lt_trie1 = lt_trie0(x1) in
				sum(<x2, mk_trie2> <- mk_trie1)
					if (x2 ∈ k_trie0) then
						let k_trie1 = k_trie0(x2) in
						let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie2) promote[min_sum](<col1=interm0_tuple.col1, col4=interm0_tuple.col4>) in
						let mn_lt = sum(<i, _> <- lt_trie1) promote[min_sum](<link=lt.link(i)>) in
						promote[min_sum](<col3=mn_interm0.col1, col5=mn_interm0.col4, col6=mn_lt.link>)
