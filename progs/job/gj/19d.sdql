let mi = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/movie_info.csv")
let t = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/19d/t.csv")
let mc = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, company_id: @vector {int -> int}, company_type_id: @vector {int -> int}, note: @vector {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let it = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/19d/it.csv")
let cn = load[<id: @vector {int -> int}, name: @vector {int -> string}, country_code: @vector {int -> string}, imdb_id: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, name_pcode_sf: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/19d/cn.csv")
let n = load[<id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, imdb_id: @vector {int -> string}, gender: @vector {int -> string}, name_pcode_cf: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/19d/n.csv")
let an = load[<id: @vector {int -> int}, person_id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, name_pcode_cf: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/aka_name.csv")
let ci = load[<id: @vector {int -> int}, person_id: @vector {int -> int}, movie_id: @vector {int -> int}, person_role_id: @vector {int -> int}, note: @vector {int -> string}, nr_order: @vector {int -> int}, role_id: @vector {int -> int}, size: int>]("datasets/job/19d/ci.csv")
let rt = load[<id: @vector {int -> int}, role: @vector {int -> string}, size: int>]("datasets/job/19d/rt.csv")
let chn = load[<id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, imdb_id: @vector {int -> int}, name_pcode_cf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/char_name.csv")

let mi_trie0 =
	sum(<i,_> <- range(mi.size))
		let mi_tuple = <
			id=mi.id(i),
			movie_id=mi.movie_id(i),
			info_type_id=mi.info_type_id(i),
			info=mi.info(i),
			note=mi.note(i)
		>
		{ mi_tuple.movie_id -> { mi_tuple.info_type_id -> @vecdict { mi_tuple -> 1 } } } in

let t_trie0 =
	sum(<i,_> <- range(t.size))
		let t_tuple = <
			id=t.id(i),
			title=t.title(i),
			imdb_index=t.imdb_index(i),
			kind_id=t.kind_id(i),
			production_year=t.production_year(i),
			imdb_id=t.imdb_id(i),
			phonetic_code=t.phonetic_code(i),
			episode_of_id=t.episode_of_id(i),
			season_nr=t.season_nr(i),
			episode_nr=t.episode_nr(i),
			series_years=t.series_years(i),
			md5sum=t.md5sum(i)
		>
		{ t_tuple.id -> @vecdict { t_tuple -> 1 } } in

let mc_trie0 =
	sum(<i,_> <- range(mc.size))
		let mc_tuple = <
			id=mc.id(i),
			movie_id=mc.movie_id(i),
			company_id=mc.company_id(i),
			company_type_id=mc.company_type_id(i),
			note=mc.note(i)
		>
		{ mc_tuple.movie_id -> { mc_tuple.company_id -> @vecdict { mc_tuple -> 1 } } } in

let it_trie0 =
	sum(<i,_> <- range(it.size))
		let it_tuple = <
			id=it.id(i),
			info=it.info(i)
		>
		{ it_tuple.id -> @vecdict { it_tuple -> 1 } } in

let cn_trie0 =
	sum(<i,_> <- range(cn.size))
		let cn_tuple = <
			id=cn.id(i),
			name=cn.name(i),
			country_code=cn.country_code(i),
			imdb_id=cn.imdb_id(i),
			name_pcode_nf=cn.name_pcode_nf(i),
			name_pcode_sf=cn.name_pcode_sf(i),
			md5sum=cn.md5sum(i)
		>
		{ cn_tuple.id -> @vecdict { cn_tuple -> 1 } } in

let interm0_trie0 = sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ t_trie0) then
		if (x0 ∈ mc_trie0) then
			let t_trie1 = t_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			sum(<x1, mi_trie2> <- mi_trie1)
				if (x1 ∈ it_trie0) then
					let it_trie1 = it_trie0(x1) in
					sum(<x2, mc_trie2> <- mc_trie1)
						if (x2 ∈ cn_trie0) then
							let cn_trie1 = cn_trie0(x2) in
							sum(<mi_tuple, _> <- mi_trie2)
								sum(<t_tuple, _> <- t_trie1)
									sum(<mc_tuple, _> <- mc_trie2)
										{ mi_tuple.movie_id -> @vecdict { <col0=mi_tuple.movie_id, col1=mi_tuple.info_type_id, col2=t_tuple.title, col3=mc_tuple.company_id> -> 1 } }
in

let n_trie0 =
	sum(<i,_> <- range(n.size))
		let n_tuple = <
			id=n.id(i),
			name=n.name(i),
			imdb_index=n.imdb_index(i),
			imdb_id=n.imdb_id(i),
			gender=n.gender(i),
			name_pcode_cf=n.name_pcode_cf(i),
			name_pcode_nf=n.name_pcode_nf(i),
			surname_pcode=n.surname_pcode(i),
			md5sum=n.md5sum(i)
		>
		{ n_tuple.id -> @vecdict { n_tuple -> 1 } } in

let an_trie0 =
	sum(<i,_> <- range(an.size))
		let an_tuple = <
			id=an.id(i),
			person_id=an.person_id(i),
			name=an.name(i),
			imdb_index=an.imdb_index(i),
			name_pcode_cf=an.name_pcode_cf(i),
			name_pcode_nf=an.name_pcode_nf(i),
			surname_pcode=an.surname_pcode(i),
			md5sum=an.md5sum(i)
		>
		{ an_tuple.person_id -> @vecdict { an_tuple -> 1 } } in

let interm1_trie0 = sum(<x0, n_trie1> <- n_trie0)
	if (x0 ∈ an_trie0) then
		let an_trie1 = an_trie0(x0) in
		sum(<n_tuple, _> <- n_trie1)
			{ n_tuple.id -> @vecdict { <col0=n_tuple.id, col1=n_tuple.name> -> 1 } }
in

let ci_trie0 =
	sum(<i,_> <- range(ci.size))
		let ci_tuple = <
			id=ci.id(i),
			person_id=ci.person_id(i),
			movie_id=ci.movie_id(i),
			person_role_id=ci.person_role_id(i),
			note=ci.note(i),
			nr_order=ci.nr_order(i),
			role_id=ci.role_id(i)
		>
		{ ci_tuple.role_id -> { ci_tuple.person_role_id -> { ci_tuple.person_id -> { ci_tuple.movie_id -> 1 } } } } in

let rt_trie0 =
	sum(<i,_> <- range(rt.size))
		let rt_tuple = <
			id=rt.id(i),
			role=rt.role(i)
		>
		{ rt_tuple.id -> 1 } in

let chn_trie0 =
	sum(<i,_> <- range(chn.size))
		let chn_tuple = <
			id=chn.id(i),
			name=chn.name(i),
			imdb_index=chn.imdb_index(i),
			imdb_id=chn.imdb_id(i),
			name_pcode_cf=chn.name_pcode_cf(i),
			surname_pcode=chn.surname_pcode(i),
			md5sum=chn.md5sum(i)
		>
		{ chn_tuple.id -> 1 } in

sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ rt_trie0) then
		let rt_trie1 = rt_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ chn_trie0) then
				let chn_trie1 = chn_trie0(x1) in
				sum(<x2, ci_trie3> <- ci_trie2)
					if (x2 ∈ interm1_trie0) then
						let interm1_trie1 = interm1_trie0(x2) in
						sum(<x3, ci_trie4> <- ci_trie3)
							if (x3 ∈ interm0_trie0) then
								let interm0_trie1 = interm0_trie0(x3) in
								let mn_interm1 = sum(<interm1_tuple, _> <- interm1_trie1) promote[min_sum](<col1=interm1_tuple.col1>) in
								let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) promote[min_sum](<col2=interm0_tuple.col2>) in
								promote[min_sum](<col4=mn_interm1.col1, col6=mn_interm0.col2>)
