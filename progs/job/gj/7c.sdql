let n = load[{<id: int, name: string, imdb_index: string, imdb_id: string, gender: string, name_pcode_cf: string, name_pcode_nf: string, surname_pcode: string, md5sum: string> -> int}]("datasets/job/7c/n.csv")
let pi = load[{<id: int, person_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/7c/pi.csv")
let it = load[{<id: int, info: string> -> int}]("datasets/job/7c/it.csv")
let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/7c/t.csv")
let ml = load[{<id: int, movie_id: int, linked_movie_id: int, link_type_id: int> -> int}]("datasets/job/movie_link.csv")
let lt = load[{<id: int, link: string> -> int}]("datasets/job/7c/lt.csv")
let ci = load[{<id: int, person_id: int, movie_id: int, person_role_id: int, note: string, nr_order: int, role_id: int> -> int}]("datasets/job/cast_info.csv")
let an = load[{<id: int, person_id: int, name: string, imdb_index: string, name_pcode_cf: string, name_pcode_nf: string, surname_pcode: string, md5sum: string> -> int}]("datasets/job/7c/an.csv")

let n_trie0 = sum_vec(<n_tuple, _> <- n) { n_tuple.id -> { n_tuple -> 1 } } in
let pi_trie0 = sum_vec(<pi_tuple, _> <- pi) { pi_tuple.person_id -> { pi_tuple.info_type_id -> { pi_tuple -> 1 } } } in
let it_trie0 = sum_vec(<it_tuple, _> <- it) { it_tuple.id -> { it_tuple -> 1 } } in
let interm0_trie0 = sum_vec(<x0, n_trie1> <- n_trie0)
	if (x0 ∈ pi_trie0) then
		let pi_trie1 = pi_trie0(x0) in
		sum_vec(<x1, pi_trie2> <- pi_trie1)
			if (x1 ∈ it_trie0) then
				let it_trie1 = it_trie0(x1) in
				sum_vec(<n_tuple, _> <- n_trie1)
					sum_vec(<pi_tuple, _> <- pi_trie2)
						{ n_tuple.id -> { <col0=n_tuple.id, col1=n_tuple.name, col2=pi_tuple.info_type_id, col3=pi_tuple.info> -> 1 } }
in

let t_trie0 = sum_vec(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple -> 1 } } in
let ml_trie0 = sum_vec(<ml_tuple, _> <- ml) { ml_tuple.linked_movie_id -> { ml_tuple.link_type_id -> { ml_tuple -> 1 } } } in
let lt_trie0 = sum_vec(<lt_tuple, _> <- lt) { lt_tuple.id -> { lt_tuple -> 1 } } in
let interm1_trie0 = sum_vec(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ ml_trie0) then
		let ml_trie1 = ml_trie0(x0) in
		sum_vec(<x1, ml_trie2> <- ml_trie1)
			if (x1 ∈ lt_trie0) then
				let lt_trie1 = lt_trie0(x1) in
				sum_vec(<t_tuple, _> <- t_trie1)
					sum_vec(<ml_tuple, _> <- ml_trie2)
						{ t_tuple.id -> { <col0=t_tuple.id, col1=ml_tuple.link_type_id> -> 1 } }
in

let ci_trie0 = sum(<ci_tuple, _> <- ci) { ci_tuple.movie_id -> { ci_tuple.person_id -> 1 } } in
let an_trie0 = sum(<an_tuple, _> <- an) { an_tuple.person_id -> 1 } in
sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ interm0_trie0) then
				if (x1 ∈ an_trie0) then
					let interm0_trie1 = interm0_trie0(x1) in
					let an_trie1 = an_trie0(x1) in
					let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) promote[min_sum](<col1=interm0_tuple.col1, col3=interm0_tuple.col3>) in
					promote[min_sum](<col3=mn_interm0.col1, col5=mn_interm0.col3>)
