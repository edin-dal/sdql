let t = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/21c/t.csv")
let ml = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, linked_movie_id: @vector {int -> int}, link_type_id: @vector {int -> int}, size: int>]("datasets/job/movie_link.csv")
let mk = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, keyword_id: @vector {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let mi = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/21c/mi.csv")
let mc = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, company_id: @vector {int -> int}, company_type_id: @vector {int -> int}, note: @vector {int -> string}, size: int>]("datasets/job/21c/mc.csv")
let lt = load[<id: @vector {int -> int}, link: @vector {int -> string}, size: int>]("datasets/job/21c/lt.csv")
let k = load[<id: @vector {int -> int}, keyword: @vector {int -> string}, phonetic_code: @vector {int -> string}, size: int>]("datasets/job/21c/k.csv")
let ct = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/21c/ct.csv")
let cn = load[<id: @vector {int -> int}, name: @vector {int -> string}, country_code: @vector {int -> string}, imdb_id: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, name_pcode_sf: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/21c/cn.csv")

let t_trie0 = sum(<i,_> <- range(t.size)) { t.id(i) -> @vecdict { i -> 1 } } in
let ml_trie0 = sum(<i,_> <- range(ml.size)) { ml.movie_id(i) -> @vecdict { i -> 1 } } in
let interm0_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ ml_trie0) then
		let ml_trie1 = ml_trie0(x0) in
		sum(<i, _> <- t_trie1)
			sum(<j, _> <- ml_trie1)
				{ t.id(i) -> @vecs { <col0=t.id(i), col1=t.title(i), col2=ml.link_type_id(j)> -> 1 } }
in

let mk_trie0 = sum(<i,_> <- range(mk.size)) { mk.movie_id(i) -> @vecdict { i -> 1 } } in
let interm1_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<i, _> <- mk_trie1)
			sum(<interm0_tuple, _> <- interm0_trie1)
				{ mk.movie_id(i) -> { interm0_tuple.col2 -> { mk.keyword_id(i) -> @vecs { <col0=mk.movie_id(i), col1=mk.keyword_id(i), col2=interm0_tuple.col1, col3=interm0_tuple.col2> -> 1 } } } }
in

let mi_trie0 = sum(<i,_> <- range(mi.size)) { mi.movie_id(i) -> 1 } in
let mc_trie0 = sum(<i,_> <- range(mc.size)) { mc.movie_id(i) -> { mc.company_type_id(i) -> { mc.company_id(i) -> 1 } } } in
let lt_trie0 = sum(<i,_> <- range(lt.size)) { lt.id(i) -> @vecdict { i -> 1 } } in
let k_trie0 = sum(<i,_> <- range(k.size)) { k.id(i) -> 1 } in
let ct_trie0 = sum(<i,_> <- range(ct.size)) { ct.id(i) -> 1 } in
let cn_trie0 = sum(<i,_> <- range(cn.size)) { cn.id(i) -> @vecdict { i -> 1 } } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm1_trie0) then
		if (x0 ∈ mc_trie0) then
			let interm1_trie1 = interm1_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			sum(<x1, interm1_trie2> <- interm1_trie1)
				if (x1 ∈ lt_trie0) then
					let lt_trie1 = lt_trie0(x1) in
					sum(<x2, interm1_trie3> <- interm1_trie2)
						if (x2 ∈ k_trie0) then
							let k_trie1 = k_trie0(x2) in
							sum(<x3, mc_trie2> <- mc_trie1)
								if (x3 ∈ ct_trie0) then
									let ct_trie1 = ct_trie0(x3) in
									sum(<x4, mc_trie3> <- mc_trie2)
										if (x4 ∈ cn_trie0) then
											let cn_trie1 = cn_trie0(x4) in
											let mn_interm1 = sum(<interm1_tuple, _> <- interm1_trie3) promote[min_sum](<col2=interm1_tuple.col2>) in
											let mn_lt = sum(<i, _> <- lt_trie1) promote[min_sum](<link=lt.link(i)>) in
											let mn_cn = sum(<i, _> <- cn_trie1) promote[min_sum](<name=cn.name(i)>) in
											promote[min_sum](<col3=mn_interm1.col2, col6=mn_lt.link, col7=mn_cn.name>)
