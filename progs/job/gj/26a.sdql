let cc = load_cstore[{<id: int, movie_id: int, subject_id: int, status_id: int> -> int}]("datasets/job/complete_cast.csv")
let cct1 = load_cstore[{<id: int, kind: string> -> int}]("datasets/job/26a/cct1.csv")
let cct2 = load_cstore[{<id: int, kind: string> -> int}]("datasets/job/26a/cct2.csv")
let mi_idx = load_cstore[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/26a/mi_idx.csv")
let it2 = load_cstore[{<id: int, info: string> -> int}]("datasets/job/26a/it2.csv")
let t = load_cstore[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/26a/t.csv")
let kt = load_cstore[{<id: int, kind: string> -> int}]("datasets/job/26a/kt.csv")
let mk = load_cstore[{<id: int, movie_id: int, keyword_id: int> -> int}]("datasets/job/movie_keyword.csv")
let k = load_cstore[{<id: int, keyword: string, phonetic_code: string> -> int}]("datasets/job/26a/k.csv")
let ci = load_cstore[{<id: int, person_id: int, movie_id: int, person_role_id: int, note: string, nr_order: int, role_id: int> -> int}]("datasets/job/cast_info.csv")
let n = load_cstore[{<id: int, name: string, imdb_index: string, imdb_id: string, gender: string, name_pcode_cf: string, name_pcode_nf: string, surname_pcode: string, md5sum: string> -> int}]("datasets/job/name.csv")
let chn = load_cstore[{<id: int, name: string, imdb_index: string, imdb_id: int, name_pcode_cf: string, surname_pcode: string, md5sum: string> -> int}]("datasets/job/26a/chn.csv")

let cc_trie0 =
	sum(<i,_> <- range(cc.size))
		let cc_tuple = <
			id=cc.id(i),
			movie_id=cc.movie_id(i),
			subject_id=cc.subject_id(i),
			status_id=cc.status_id(i)
		>
		{ cc_tuple.subject_id -> { cc_tuple.status_id -> @vecdict { cc_tuple -> 1 } } } in

let cct1_trie0 =
	sum(<i,_> <- range(cct1.size))
		let cct1_tuple = <
			id=cct1.id(i),
			kind=cct1.kind(i)
		>
		{ cct1_tuple.id -> @vecdict { cct1_tuple -> 1 } } in

let cct2_trie0 =
	sum(<i,_> <- range(cct2.size))
		let cct2_tuple = <
			id=cct2.id(i),
			kind=cct2.kind(i)
		>
		{ cct2_tuple.id -> @vecdict { cct2_tuple -> 1 } } in

let interm0_trie0 = sum(<x0, cc_trie1> <- cc_trie0)
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		sum(<x1, cc_trie2> <- cc_trie1)
			if (x1 ∈ cct2_trie0) then
				let cct2_trie1 = cct2_trie0(x1) in
				sum(<cc_tuple, _> <- cc_trie2)
					{ cc_tuple.movie_id -> @vecdict { <col0=cc_tuple.subject_id, col1=cc_tuple.status_id, col2=cc_tuple.movie_id> -> 1 } }
in

let mi_idx_trie0 =
	sum(<i,_> <- range(mi_idx.size))
		let mi_idx_tuple = <
			id=mi_idx.id(i),
			movie_id=mi_idx.movie_id(i),
			info_type_id=mi_idx.info_type_id(i),
			info=mi_idx.info(i),
			note=mi_idx.note(i)
		>
		{ mi_idx_tuple.info_type_id -> { mi_idx_tuple.movie_id -> @vecdict { mi_idx_tuple -> 1 } } } in

let it2_trie0 =
	sum(<i,_> <- range(it2.size))
		let it2_tuple = <
			id=it2.id(i),
			info=it2.info(i)
		>
		{ it2_tuple.id -> @vecdict { it2_tuple -> 1 } } in

let interm1_trie0 = sum(<x0, mi_idx_trie1> <- mi_idx_trie0)
	if (x0 ∈ it2_trie0) then
		let it2_trie1 = it2_trie0(x0) in
		sum(<x1, mi_idx_trie2> <- mi_idx_trie1)
			if (x1 ∈ interm0_trie0) then
				let interm0_trie1 = interm0_trie0(x1) in
				sum(<mi_idx_tuple, _> <- mi_idx_trie2)
					{ mi_idx_tuple.movie_id -> @vecdict { <col0=mi_idx_tuple.info_type_id, col1=mi_idx_tuple.movie_id, col2=mi_idx_tuple.info> -> 1 } }
in

let t_trie0 =
	sum(<i,_> <- range(t.size))
		let t_tuple = <
			id=t.id(i),
			title=t.title(i),
			imdb_index=t.imdb_index(i),
			kind_id=t.kind_id(i),
			production_year=t.production_year(i),
			imdb_id=t.imdb_id(i),
			phonetic_code=t.phonetic_code(i),
			episode_of_id=t.episode_of_id(i),
			season_nr=t.season_nr(i),
			episode_nr=t.episode_nr(i),
			series_years=t.series_years(i),
			md5sum=t.md5sum(i)
		>
		{ t_tuple.kind_id -> { t_tuple.id -> @vecdict { t_tuple -> 1 } } } in

let kt_trie0 =
	sum(<i,_> <- range(kt.size))
		let kt_tuple = <
			id=kt.id(i),
			kind=kt.kind(i)
		>
		{ kt_tuple.id -> @vecdict { kt_tuple -> 1 } } in

let interm2_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ kt_trie0) then
		let kt_trie1 = kt_trie0(x0) in
		sum(<x1, t_trie2> <- t_trie1)
			if (x1 ∈ interm1_trie0) then
				let interm1_trie1 = interm1_trie0(x1) in
				sum(<t_tuple, _> <- t_trie2)
					sum(<interm1_tuple, _> <- interm1_trie1)
						{ t_tuple.id -> @vecdict { <col0=t_tuple.kind_id, col1=t_tuple.id, col2=t_tuple.title, col4=interm1_tuple.col2> -> 1 } }
in

let mk_trie0 =
	sum(<i,_> <- range(mk.size))
		let mk_tuple = <
			id=mk.id(i),
			movie_id=mk.movie_id(i),
			keyword_id=mk.keyword_id(i)
		>
		{ mk_tuple.keyword_id -> { mk_tuple.movie_id -> @vecdict { mk_tuple -> 1 } } } in

let k_trie0 =
	sum(<i,_> <- range(k.size))
		let k_tuple = <
			id=k.id(i),
			keyword=k.keyword(i),
			phonetic_code=k.phonetic_code(i)
		>
		{ k_tuple.id -> @vecdict { k_tuple -> 1 } } in

let interm3_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		sum(<x1, mk_trie2> <- mk_trie1)
			if (x1 ∈ interm2_trie0) then
				let interm2_trie1 = interm2_trie0(x1) in
				sum(<mk_tuple, _> <- mk_trie2)
					sum(<interm2_tuple, _> <- interm2_trie1)
						{ mk_tuple.movie_id -> @vecdict { <col0=mk_tuple.keyword_id, col1=mk_tuple.movie_id, col3=interm2_tuple.col2, col5=interm2_tuple.col4> -> 1 } }
in

let ci_trie0 =
	sum(<i,_> <- range(ci.size))
		let ci_tuple = <
			id=ci.id(i),
			person_id=ci.person_id(i),
			movie_id=ci.movie_id(i),
			person_role_id=ci.person_role_id(i),
			note=ci.note(i),
			nr_order=ci.nr_order(i),
			role_id=ci.role_id(i)
		>
		{ ci_tuple.person_id -> { ci_tuple.person_role_id -> { ci_tuple.movie_id -> 1 } } } in

let n_trie0 =
	sum(<i,_> <- range(n.size))
		let n_tuple = <
			id=n.id(i),
			name=n.name(i),
			imdb_index=n.imdb_index(i),
			imdb_id=n.imdb_id(i),
			gender=n.gender(i),
			name_pcode_cf=n.name_pcode_cf(i),
			name_pcode_nf=n.name_pcode_nf(i),
			surname_pcode=n.surname_pcode(i),
			md5sum=n.md5sum(i)
		>
		{ n_tuple.id -> @vecdict { n_tuple -> 1 } } in

let chn_trie0 =
	sum(<i,_> <- range(chn.size))
		let chn_tuple = <
			id=chn.id(i),
			name=chn.name(i),
			imdb_index=chn.imdb_index(i),
			imdb_id=chn.imdb_id(i),
			name_pcode_cf=chn.name_pcode_cf(i),
			surname_pcode=chn.surname_pcode(i),
			md5sum=chn.md5sum(i)
		>
		{ chn_tuple.id -> @vecdict { chn_tuple -> 1 } } in

sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ n_trie0) then
		let n_trie1 = n_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ chn_trie0) then
				let chn_trie1 = chn_trie0(x1) in
				sum(<x2, ci_trie3> <- ci_trie2)
					if (x2 ∈ interm3_trie0) then
						let interm3_trie1 = interm3_trie0(x2) in
						let mn_n = sum(<n_tuple, _> <- n_trie1) promote[min_sum](<name=n_tuple.name>) in
						let mn_chn = sum(<chn_tuple, _> <- chn_trie1) promote[min_sum](<name=chn_tuple.name>) in
						let mn_interm3 = sum(<interm3_tuple, _> <- interm3_trie1) promote[min_sum](<col3=interm3_tuple.col3, col5=interm3_tuple.col5>) in
						promote[min_sum](<col3=mn_n.name, col4=mn_chn.name, col7=mn_interm3.col3, col9=mn_interm3.col5>)
