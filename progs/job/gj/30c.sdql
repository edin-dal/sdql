let cc = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, subject_id: @vector {int -> int}, status_id: @vector {int -> int}, size: int>]("datasets/job/complete_cast.csv")
let cct1 = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/30c/cct1.csv")
let cct2 = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/30c/cct2.csv")
let mi_idx = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/movie_info_idx.csv")
let it2 = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/30c/it2.csv")
let t = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/title.csv")
let mk = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, keyword_id: @vector {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let k = load[<id: @vector {int -> int}, keyword: @vector {int -> string}, phonetic_code: @vector {int -> string}, size: int>]("datasets/job/30c/k.csv")
let mi = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/30c/mi.csv")
let it1 = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/30c/it1.csv")
let ci = load[<id: @vector {int -> int}, person_id: @vector {int -> int}, movie_id: @vector {int -> int}, person_role_id: @vector {int -> int}, note: @vector {int -> string}, nr_order: @vector {int -> int}, role_id: @vector {int -> int}, size: int>]("datasets/job/30c/ci.csv")
let n = load[<id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, imdb_id: @vector {int -> string}, gender: @vector {int -> string}, name_pcode_cf: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/30c/n.csv")

let cc_trie0 = sum(<i,_> <- range(cc.size)) { cc.subject_id(i) -> { cc.status_id(i) -> @vecdict { i -> 1 } } } in
let cct1_trie0 = sum(<i,_> <- range(cct1.size)) { cct1.id(i) -> @vecdict { i -> 1 } } in
let cct2_trie0 = sum(<i,_> <- range(cct2.size)) { cct2.id(i) -> @vecdict { i -> 1 } } in
let interm0_trie0 = sum(<x0, cc_trie1> <- cc_trie0)
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		sum(<x1, cc_trie2> <- cc_trie1)
			if (x1 ∈ cct2_trie0) then
				let cct2_trie1 = cct2_trie0(x1) in
				sum(<i, _> <- cc_trie2)
					{ cc.movie_id(i) -> @vecs { <col0=cc.subject_id(i), col1=cc.status_id(i), col2=cc.movie_id(i)> -> 1 } }
in

let mi_idx_trie0 = sum(<i,_> <- range(mi_idx.size)) { mi_idx.info_type_id(i) -> { mi_idx.movie_id(i) -> @vecdict { i -> 1 } } } in
let it2_trie0 = sum(<i,_> <- range(it2.size)) { it2.id(i) -> @vecdict { i -> 1 } } in
let interm1_trie0 = sum(<x0, mi_idx_trie1> <- mi_idx_trie0)
	if (x0 ∈ it2_trie0) then
		let it2_trie1 = it2_trie0(x0) in
		sum(<x1, mi_idx_trie2> <- mi_idx_trie1)
			if (x1 ∈ interm0_trie0) then
				let interm0_trie1 = interm0_trie0(x1) in
				sum(<i, _> <- mi_idx_trie2)
					{ mi_idx.movie_id(i) -> @vecs { <col0=mi_idx.info_type_id(i), col1=mi_idx.movie_id(i), col2=mi_idx.info(i)> -> 1 } }
in

let t_trie0 = sum(<i,_> <- range(t.size)) { t.id(i) -> @vecdict { i -> 1 } } in
let interm2_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		sum(<i, _> <- t_trie1)
			sum(<interm1_tuple, _> <- interm1_trie1)
				{ t.id(i) -> @vecs { <col0=t.id(i), col1=t.title(i), col3=interm1_tuple.col2> -> 1 } }
in

let mk_trie0 = sum(<i,_> <- range(mk.size)) { mk.keyword_id(i) -> { mk.movie_id(i) -> @vecdict { i -> 1 } } } in
let k_trie0 = sum(<i,_> <- range(k.size)) { k.id(i) -> @vecdict { i -> 1 } } in
let interm3_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		sum(<x1, mk_trie2> <- mk_trie1)
			if (x1 ∈ interm2_trie0) then
				let interm2_trie1 = interm2_trie0(x1) in
				sum(<i, _> <- mk_trie2)
					sum(<interm2_tuple, _> <- interm2_trie1)
						{ mk.movie_id(i) -> @vecs { <col0=mk.keyword_id(i), col1=mk.movie_id(i), col2=interm2_tuple.col1, col4=interm2_tuple.col3> -> 1 } }
in

let mi_trie0 = sum(<i,_> <- range(mi.size)) { mi.info_type_id(i) -> { mi.movie_id(i) -> @vecdict { i -> 1 } } } in
let it1_trie0 = sum(<i,_> <- range(it1.size)) { it1.id(i) -> @vecdict { i -> 1 } } in
let interm4_trie0 = sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ it1_trie0) then
		let it1_trie1 = it1_trie0(x0) in
		sum(<x1, mi_trie2> <- mi_trie1)
			if (x1 ∈ interm3_trie0) then
				let interm3_trie1 = interm3_trie0(x1) in
				sum(<i, _> <- mi_trie2)
					sum(<interm3_tuple, _> <- interm3_trie1)
						{ mi.movie_id(i) -> @vecs { <col0=mi.info_type_id(i), col1=mi.movie_id(i), col2=mi.info(i), col4=interm3_tuple.col2, col6=interm3_tuple.col4> -> 1 } }
in

let ci_trie0 = sum(<i,_> <- range(ci.size)) { ci.person_id(i) -> { ci.movie_id(i) -> 1 } } in
let n_trie0 = sum(<i,_> <- range(n.size)) { n.id(i) -> @vecdict { i -> 1 } } in
sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ n_trie0) then
		let n_trie1 = n_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ interm4_trie0) then
				let interm4_trie1 = interm4_trie0(x1) in
				let mn_n = sum(<i, _> <- n_trie1) promote[min_sum](<name=n.name(i)>) in
				let mn_interm4 = sum(<interm4_tuple, _> <- interm4_trie1) promote[min_sum](<col2=interm4_tuple.col2, col4=interm4_tuple.col4, col6=interm4_tuple.col6>) in
				promote[min_sum](<col2=mn_n.name, col4=mn_interm4.col2, col6=mn_interm4.col4, col8=mn_interm4.col6>)
