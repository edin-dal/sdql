let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/14b/t.csv")
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/14b/mi_idx.csv")
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/14b/mi.csv")
let kt = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/14b/kt.csv")
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/14b/k.csv")
let it2 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/14b/it2.csv")
let it1 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/14b/it1.csv")

let mk_trie0 = sum(<i,_> <- range(mk.size)) { mk.movie_id(i) -> @vecdict { i -> 1 } } in
let t_trie0 = sum(<i,_> <- range(t.size)) { t.id(i) -> @vecdict { i -> 1 } } in
let mi_idx_trie0 = sum(<i,_> <- range(mi_idx.size)) { mi_idx.movie_id(i) -> @vecdict { i -> 1 } } in
let interm0_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ t_trie0) then
		if (x0 ∈ mi_idx_trie0) then
			let t_trie1 = t_trie0(x0) in
			let mi_idx_trie1 = mi_idx_trie0(x0) in
			sum(<i, _> <- mk_trie1)
				sum(<j, _> <- t_trie1)
					sum(<k, _> <- mi_idx_trie1)
						{ mk.movie_id(i) -> { t.kind_id(j) -> { mk.keyword_id(i) -> { mi_idx.info_type_id(k) -> @vecdict { <col0=mk.movie_id(i), col1=mk.keyword_id(i), col2=t.title(j), col3=t.kind_id(j), col4=mi_idx.info_type_id(k), col5=mi_idx.info(k)> -> 1 } } } } }
in

let mi_trie0 = sum(<i,_> <- range(mi.size)) { mi.movie_id(i) -> { mi.info_type_id(i) -> 1 } } in
let kt_trie0 = sum(<i,_> <- range(kt.size)) { kt.id(i) -> 1 } in
let k_trie0 = sum(<i,_> <- range(k.size)) { k.id(i) -> 1 } in
let it2_trie0 = sum(<i,_> <- range(it2.size)) { it2.id(i) -> 1 } in
let it1_trie0 = sum(<i,_> <- range(it1.size)) { it1.id(i) -> 1 } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<x1, interm0_trie2> <- interm0_trie1)
			if (x1 ∈ kt_trie0) then
				let kt_trie1 = kt_trie0(x1) in
				sum(<x2, interm0_trie3> <- interm0_trie2)
					if (x2 ∈ k_trie0) then
						let k_trie1 = k_trie0(x2) in
						sum(<x3, interm0_trie4> <- interm0_trie3)
							if (x3 ∈ it2_trie0) then
								let it2_trie1 = it2_trie0(x3) in
								sum(<x4, mi_trie2> <- mi_trie1)
									if (x4 ∈ it1_trie0) then
										let it1_trie1 = it1_trie0(x4) in
										let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie4) promote[min_sum](<col2=interm0_tuple.col2, col5=interm0_tuple.col5>) in
										promote[min_sum](<col5=mn_interm0.col2, col6=mn_interm0.col5>)
