let ml = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, linked_movie_id: @vector {int -> int}, link_type_id: @vector {int -> int}, size: int>]("datasets/job/movie_link.csv")
let lt = load[<id: @vector {int -> int}, link: @vector {int -> string}, size: int>]("datasets/job/33b/lt.csv")
let mi_idx1 = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/movie_info_idx.csv")
let it1 = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/33b/it1.csv")
let mi_idx2 = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, info_type_id: @vector {int -> int}, info: @vector {int -> string}, note: @vector {int -> string}, size: int>]("datasets/job/33b/mi_idx2.csv")
let it2 = load[<id: @vector {int -> int}, info: @vector {int -> string}, size: int>]("datasets/job/33b/it2.csv")
let t1 = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/title.csv")
let kt1 = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/33b/kt1.csv")
let t2 = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/33b/t2.csv")
let kt2 = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/33b/kt2.csv")
let mc1 = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, company_id: @vector {int -> int}, company_type_id: @vector {int -> int}, note: @vector {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let cn1 = load[<id: @vector {int -> int}, name: @vector {int -> string}, country_code: @vector {int -> string}, imdb_id: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, name_pcode_sf: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/33b/cn1.csv")
let mc2 = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, company_id: @vector {int -> int}, company_type_id: @vector {int -> int}, note: @vector {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let cn2 = load[<id: @vector {int -> int}, name: @vector {int -> string}, country_code: @vector {int -> string}, imdb_id: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, name_pcode_sf: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/company_name.csv")

let ml_trie0 =
	sum(<i,_> <- range(ml.size))
		let ml_tuple = <
			id=ml.id(i),
			movie_id=ml.movie_id(i),
			linked_movie_id=ml.linked_movie_id(i),
			link_type_id=ml.link_type_id(i)
		>
		{ ml_tuple.link_type_id -> @vecdict { ml_tuple -> 1 } } in

let lt_trie0 =
	sum(<i,_> <- range(lt.size))
		let lt_tuple = <
			id=lt.id(i),
			link=lt.link(i)
		>
		{ lt_tuple.id -> @vecdict { lt_tuple -> 1 } } in

let interm0_trie0 = sum(<x0, ml_trie1> <- ml_trie0)
	if (x0 ∈ lt_trie0) then
		let lt_trie1 = lt_trie0(x0) in
		sum(<ml_tuple, _> <- ml_trie1)
			{ ml_tuple.movie_id -> @vecdict { <col0=ml_tuple.link_type_id, col1=ml_tuple.movie_id, col2=ml_tuple.linked_movie_id> -> 1 } }
in

let mi_idx1_trie0 =
	sum(<i,_> <- range(mi_idx1.size))
		let mi_idx1_tuple = <
			id=mi_idx1.id(i),
			movie_id=mi_idx1.movie_id(i),
			info_type_id=mi_idx1.info_type_id(i),
			info=mi_idx1.info(i),
			note=mi_idx1.note(i)
		>
		{ mi_idx1_tuple.info_type_id -> { mi_idx1_tuple.movie_id -> @vecdict { mi_idx1_tuple -> 1 } } } in

let it1_trie0 =
	sum(<i,_> <- range(it1.size))
		let it1_tuple = <
			id=it1.id(i),
			info=it1.info(i)
		>
		{ it1_tuple.id -> @vecdict { it1_tuple -> 1 } } in

let interm1_trie0 = sum(<x0, mi_idx1_trie1> <- mi_idx1_trie0)
	if (x0 ∈ it1_trie0) then
		let it1_trie1 = it1_trie0(x0) in
		sum(<x1, mi_idx1_trie2> <- mi_idx1_trie1)
			if (x1 ∈ interm0_trie0) then
				let interm0_trie1 = interm0_trie0(x1) in
				sum(<mi_idx1_tuple, _> <- mi_idx1_trie2)
					sum(<interm0_tuple, _> <- interm0_trie1)
						{ interm0_tuple.col2 -> @vecdict { <col0=mi_idx1_tuple.info_type_id, col1=mi_idx1_tuple.movie_id, col2=mi_idx1_tuple.info, col4=interm0_tuple.col2> -> 1 } }
in

let mi_idx2_trie0 =
	sum(<i,_> <- range(mi_idx2.size))
		let mi_idx2_tuple = <
			id=mi_idx2.id(i),
			movie_id=mi_idx2.movie_id(i),
			info_type_id=mi_idx2.info_type_id(i),
			info=mi_idx2.info(i),
			note=mi_idx2.note(i)
		>
		{ mi_idx2_tuple.info_type_id -> { mi_idx2_tuple.movie_id -> @vecdict { mi_idx2_tuple -> 1 } } } in

let it2_trie0 =
	sum(<i,_> <- range(it2.size))
		let it2_tuple = <
			id=it2.id(i),
			info=it2.info(i)
		>
		{ it2_tuple.id -> @vecdict { it2_tuple -> 1 } } in

let interm2_trie0 = sum(<x0, mi_idx2_trie1> <- mi_idx2_trie0)
	if (x0 ∈ it2_trie0) then
		let it2_trie1 = it2_trie0(x0) in
		sum(<x1, mi_idx2_trie2> <- mi_idx2_trie1)
			if (x1 ∈ interm1_trie0) then
				let interm1_trie1 = interm1_trie0(x1) in
				sum(<mi_idx2_tuple, _> <- mi_idx2_trie2)
					sum(<interm1_tuple, _> <- interm1_trie1)
						{ interm1_tuple.col1 -> @vecdict { <col0=mi_idx2_tuple.info_type_id, col1=mi_idx2_tuple.movie_id, col2=mi_idx2_tuple.info, col4=interm1_tuple.col1, col5=interm1_tuple.col2> -> 1 } }
in

let t1_trie0 =
	sum(<i,_> <- range(t1.size))
		let t1_tuple = <
			id=t1.id(i),
			title=t1.title(i),
			imdb_index=t1.imdb_index(i),
			kind_id=t1.kind_id(i),
			production_year=t1.production_year(i),
			imdb_id=t1.imdb_id(i),
			phonetic_code=t1.phonetic_code(i),
			episode_of_id=t1.episode_of_id(i),
			season_nr=t1.season_nr(i),
			episode_nr=t1.episode_nr(i),
			series_years=t1.series_years(i),
			md5sum=t1.md5sum(i)
		>
		{ t1_tuple.kind_id -> { t1_tuple.id -> @vecdict { t1_tuple -> 1 } } } in

let kt1_trie0 =
	sum(<i,_> <- range(kt1.size))
		let kt1_tuple = <
			id=kt1.id(i),
			kind=kt1.kind(i)
		>
		{ kt1_tuple.id -> @vecdict { kt1_tuple -> 1 } } in

let interm3_trie0 = sum(<x0, t1_trie1> <- t1_trie0)
	if (x0 ∈ kt1_trie0) then
		let kt1_trie1 = kt1_trie0(x0) in
		sum(<x1, t1_trie2> <- t1_trie1)
			if (x1 ∈ interm2_trie0) then
				let interm2_trie1 = interm2_trie0(x1) in
				sum(<t1_tuple, _> <- t1_trie2)
					sum(<interm2_tuple, _> <- interm2_trie1)
						{ interm2_tuple.col1 -> @vecdict { <col0=t1_tuple.kind_id, col1=t1_tuple.id, col2=t1_tuple.title, col4=interm2_tuple.col1, col5=interm2_tuple.col2, col7=interm2_tuple.col5> -> 1 } }
in

let t2_trie0 =
	sum(<i,_> <- range(t2.size))
		let t2_tuple = <
			id=t2.id(i),
			title=t2.title(i),
			imdb_index=t2.imdb_index(i),
			kind_id=t2.kind_id(i),
			production_year=t2.production_year(i),
			imdb_id=t2.imdb_id(i),
			phonetic_code=t2.phonetic_code(i),
			episode_of_id=t2.episode_of_id(i),
			season_nr=t2.season_nr(i),
			episode_nr=t2.episode_nr(i),
			series_years=t2.series_years(i),
			md5sum=t2.md5sum(i)
		>
		{ t2_tuple.kind_id -> { t2_tuple.id -> @vecdict { t2_tuple -> 1 } } } in

let kt2_trie0 =
	sum(<i,_> <- range(kt2.size))
		let kt2_tuple = <
			id=kt2.id(i),
			kind=kt2.kind(i)
		>
		{ kt2_tuple.id -> @vecdict { kt2_tuple -> 1 } } in

let interm4_trie0 = sum(<x0, t2_trie1> <- t2_trie0)
	if (x0 ∈ kt2_trie0) then
		let kt2_trie1 = kt2_trie0(x0) in
		sum(<x1, t2_trie2> <- t2_trie1)
			if (x1 ∈ interm3_trie0) then
				let interm3_trie1 = interm3_trie0(x1) in
				sum(<t2_tuple, _> <- t2_trie2)
					sum(<interm3_tuple, _> <- interm3_trie1)
						{ interm3_tuple.col1 -> @vecdict { <col0=t2_tuple.kind_id, col1=t2_tuple.id, col2=t2_tuple.title, col4=interm3_tuple.col1, col5=interm3_tuple.col2, col7=interm3_tuple.col5, col9=interm3_tuple.col7> -> 1 } }
in

let mc1_trie0 =
	sum(<i,_> <- range(mc1.size))
		let mc1_tuple = <
			id=mc1.id(i),
			movie_id=mc1.movie_id(i),
			company_id=mc1.company_id(i),
			company_type_id=mc1.company_type_id(i),
			note=mc1.note(i)
		>
		{ mc1_tuple.company_id -> { mc1_tuple.movie_id -> @vecdict { mc1_tuple -> 1 } } } in

let cn1_trie0 =
	sum(<i,_> <- range(cn1.size))
		let cn1_tuple = <
			id=cn1.id(i),
			name=cn1.name(i),
			country_code=cn1.country_code(i),
			imdb_id=cn1.imdb_id(i),
			name_pcode_nf=cn1.name_pcode_nf(i),
			name_pcode_sf=cn1.name_pcode_sf(i),
			md5sum=cn1.md5sum(i)
		>
		{ cn1_tuple.id -> @vecdict { cn1_tuple -> 1 } } in

let interm5_trie0 = sum(<x0, mc1_trie1> <- mc1_trie0)
	if (x0 ∈ cn1_trie0) then
		let cn1_trie1 = cn1_trie0(x0) in
		sum(<x1, mc1_trie2> <- mc1_trie1)
			if (x1 ∈ interm4_trie0) then
				let interm4_trie1 = interm4_trie0(x1) in
				sum(<mc1_tuple, _> <- mc1_trie2)
					sum(<cn1_tuple, _> <- cn1_trie1)
						sum(<interm4_tuple, _> <- interm4_trie1)
							{ interm4_tuple.col1 -> @vecdict { <col0=mc1_tuple.company_id, col1=mc1_tuple.movie_id, col2=cn1_tuple.name, col4=interm4_tuple.col1, col5=interm4_tuple.col2, col7=interm4_tuple.col5, col9=interm4_tuple.col7, col11=interm4_tuple.col9> -> 1 } }
in

let mc2_trie0 =
	sum(<i,_> <- range(mc2.size))
		let mc2_tuple = <
			id=mc2.id(i),
			movie_id=mc2.movie_id(i),
			company_id=mc2.company_id(i),
			company_type_id=mc2.company_type_id(i),
			note=mc2.note(i)
		>
		{ mc2_tuple.company_id -> { mc2_tuple.movie_id -> 1 } } in

let cn2_trie0 =
	sum(<i,_> <- range(cn2.size))
		let cn2_tuple = <
			id=cn2.id(i),
			name=cn2.name(i),
			country_code=cn2.country_code(i),
			imdb_id=cn2.imdb_id(i),
			name_pcode_nf=cn2.name_pcode_nf(i),
			name_pcode_sf=cn2.name_pcode_sf(i),
			md5sum=cn2.md5sum(i)
		>
		{ cn2_tuple.id -> @vecdict { cn2_tuple -> 1 } } in

sum(<x0, mc2_trie1> <- mc2_trie0)
	if (x0 ∈ cn2_trie0) then
		let cn2_trie1 = cn2_trie0(x0) in
		sum(<x1, mc2_trie2> <- mc2_trie1)
			if (x1 ∈ interm5_trie0) then
				let interm5_trie1 = interm5_trie0(x1) in
				let mn_cn2 = sum(<cn2_tuple, _> <- cn2_trie1) promote[min_sum](<name=cn2_tuple.name>) in
				let mn_interm5 = sum(<interm5_tuple, _> <- interm5_trie1) promote[min_sum](<col2=interm5_tuple.col2, col5=interm5_tuple.col5, col7=interm5_tuple.col7, col9=interm5_tuple.col9, col11=interm5_tuple.col11>) in
				promote[min_sum](<col2=mn_cn2.name, col5=mn_interm5.col2, col7=mn_interm5.col5, col9=mn_interm5.col7, col11=mn_interm5.col9, col13=mn_interm5.col11>)
