let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/22b/t.csv")
let mi_idx = load[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/22b/mi_idx.csv")
let kt = load[{<id: int, kind: string> -> int}]("datasets/job/22b/kt.csv")
let it2 = load[{<id: int, info: string> -> int}]("datasets/job/22b/it2.csv")
let mc = load[{<id: int, movie_id: int, company_id: int, company_type_id: int, note: string> -> int}]("datasets/job/22b/mc.csv")
let cn = load[{<id: int, name: string, country_code: string, imdb_id: string, name_pcode_nf: string, name_pcode_sf: string, md5sum: string> -> int}]("datasets/job/22b/cn.csv")
let ct = load[{<id: int, kind: string> -> int}]("datasets/job/company_type.csv")
let mk = load[{<id: int, movie_id: int, keyword_id: int> -> int}]("datasets/job/movie_keyword.csv")
let k = load[{<id: int, keyword: string, phonetic_code: string> -> int}]("datasets/job/22b/k.csv")
let mi = load[{<id: int, movie_id: int, info_type_id: int, info: string, note: string> -> int}]("datasets/job/22b/mi.csv")
let it1 = load[{<id: int, info: string> -> int}]("datasets/job/22b/it1.csv")

let t_trie0 = sum(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple.kind_id -> @vecdict { t_tuple -> 1 } } } in
let mi_idx_trie0 = sum(<mi_idx_tuple, _> <- mi_idx) { mi_idx_tuple.movie_id -> { mi_idx_tuple.info_type_id -> @vecdict { mi_idx_tuple -> 1 } } } in
let kt_trie0 = sum(<kt_tuple, _> <- kt) { kt_tuple.id -> @vecdict { kt_tuple -> 1 } } in
let it2_trie0 = sum(<it2_tuple, _> <- it2) { it2_tuple.id -> @vecdict { it2_tuple -> 1 } } in
let interm0_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ mi_idx_trie0) then
		let mi_idx_trie1 = mi_idx_trie0(x0) in
		sum(<x1, t_trie2> <- t_trie1)
			if (x1 ∈ kt_trie0) then
				let kt_trie1 = kt_trie0(x1) in
				sum(<x2, mi_idx_trie2> <- mi_idx_trie1)
					if (x2 ∈ it2_trie0) then
						let it2_trie1 = it2_trie0(x2) in
						sum(<t_tuple, _> <- t_trie2)
							sum(<mi_idx_tuple, _> <- mi_idx_trie2)
								{ t_tuple.id -> @vecdict { <col0=t_tuple.id, col1=t_tuple.kind_id, col2=t_tuple.title, col3=mi_idx_tuple.info_type_id, col4=mi_idx_tuple.info> -> 1 } }
in

let mc_trie0 = sum(<mc_tuple, _> <- mc) { mc_tuple.company_id -> { mc_tuple.company_type_id -> { mc_tuple.movie_id -> @vecdict { mc_tuple -> 1 } } } } in
let cn_trie0 = sum(<cn_tuple, _> <- cn) { cn_tuple.id -> @vecdict { cn_tuple -> 1 } } in
let ct_trie0 = sum(<ct_tuple, _> <- ct) { ct_tuple.id -> @vecdict { ct_tuple -> 1 } } in
let interm1_trie0 = sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ cn_trie0) then
		let cn_trie1 = cn_trie0(x0) in
		sum(<x1, mc_trie2> <- mc_trie1)
			if (x1 ∈ ct_trie0) then
				let ct_trie1 = ct_trie0(x1) in
				sum(<x2, mc_trie3> <- mc_trie2)
					if (x2 ∈ interm0_trie0) then
						let interm0_trie1 = interm0_trie0(x2) in
						sum(<mc_tuple, _> <- mc_trie3)
							sum(<cn_tuple, _> <- cn_trie1)
								sum(<interm0_tuple, _> <- interm0_trie1)
									{ mc_tuple.movie_id -> @vecdict { <col0=mc_tuple.company_id, col1=mc_tuple.company_type_id, col2=mc_tuple.movie_id, col3=cn_tuple.name, col5=interm0_tuple.col2, col7=interm0_tuple.col4> -> 1 } }
in

let mk_trie0 = sum(<mk_tuple, _> <- mk) { mk_tuple.keyword_id -> { mk_tuple.movie_id -> @vecdict { mk_tuple -> 1 } } } in
let k_trie0 = sum(<k_tuple, _> <- k) { k_tuple.id -> @vecdict { k_tuple -> 1 } } in
let interm2_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		sum(<x1, mk_trie2> <- mk_trie1)
			if (x1 ∈ interm1_trie0) then
				let interm1_trie1 = interm1_trie0(x1) in
				sum(<mk_tuple, _> <- mk_trie2)
					sum(<interm1_tuple, _> <- interm1_trie1)
						{ mk_tuple.movie_id -> @vecdict { <col0=mk_tuple.keyword_id, col1=mk_tuple.movie_id, col4=interm1_tuple.col3, col6=interm1_tuple.col5, col8=interm1_tuple.col7> -> 1 } }
in

let mi_trie0 = sum(<mi_tuple, _> <- mi) { mi_tuple.info_type_id -> { mi_tuple.movie_id -> 1 } } in
let it1_trie0 = sum(<it1_tuple, _> <- it1) { it1_tuple.id -> 1 } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ it1_trie0) then
		let it1_trie1 = it1_trie0(x0) in
		sum(<x1, mi_trie2> <- mi_trie1)
			if (x1 ∈ interm2_trie0) then
				let interm2_trie1 = interm2_trie0(x1) in
				let mn_interm2 = sum(<interm2_tuple, _> <- interm2_trie1) promote[min_sum](<col4=interm2_tuple.col4, col6=interm2_tuple.col6, col8=interm2_tuple.col8>) in
				promote[min_sum](<col5=mn_interm2.col4, col7=mn_interm2.col6, col9=mn_interm2.col8>)
