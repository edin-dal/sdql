let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/8b/mc.csv")
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/8b/cn.csv")
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/8b/ci.csv")
let n = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> string}, gender: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/8b/n.csv")
let rt = load[<id: @vec {int -> int}, role: @vec {int -> string}, size: int>]("datasets/job/8b/rt.csv")
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/8b/t.csv")
let an = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/aka_name.csv")

let mc_trie0 = sum(<i, _> <- range(mc.size)) @phmap(mc.size)  { mc.company_id(i) -> @smallvecdict(4) { i -> 1 } } in
let cn_trie0 = sum(<i, _> <- range(cn.size))  { cn.id(i) -> 1 } in
let interm0_trie0 = sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ cn_trie0) then
		let cn_trie1 = cn_trie0(x0) in
		sum(<mc_off, _> <- mc_trie1)
			{ mc.movie_id(mc_off) -> @smallvecdict(0) { <col0=mc.company_id(mc_off), col1=mc.movie_id(mc_off)> -> 1 } }
in

let ci_trie0 = sum(<i, _> <- range(ci.size))  { ci.person_id(i) ->  { ci.movie_id(i) ->  { ci.role_id(i) -> 1 } } } in
let n_trie0 = sum(<i, _> <- range(n.size))  { n.id(i) -> 1 } in
let rt_trie0 = sum(<i, _> <- range(rt.size))  { rt.id(i) -> 1 } in
let t_trie0 = sum(<i, _> <- range(t.size)) @phmap(t.size)  { t.id(i) -> @smallvecdict(4) { i -> 1 } } in
let an_trie0 = sum(<i, _> <- range(an.size)) @phmap(an.size)  { an.person_id(i) -> @smallvecdict(4) { i -> 1 } } in
sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ n_trie0) then
		let n_trie1 = n_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ interm0_trie0) then
				let interm0_trie1 = interm0_trie0(x1) in
				sum(<x2, ci_trie3> <- ci_trie2)
					if (x2 ∈ rt_trie0) then
						let rt_trie1 = rt_trie0(x2) in
						if (x1 ∈ t_trie0) then
							let t_trie1 = t_trie0(x1) in
							if (x0 ∈ an_trie0) then
								let an_trie1 = an_trie0(x0) in
								let mn_t = sum(<t_off, _> <- t_trie1) promote[min_sum](<title=t.title(t_off)>) in
								let mn_an = sum(<an_off, _> <- an_trie1) promote[min_sum](<name=an.name(an_off)>) in
								promote[min_sum](<col4=mn_t.title, col5=mn_an.name>)

