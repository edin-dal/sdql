let mc = load[{<id: int, movie_id: int, company_id: int, company_type_id: int, note: string> -> int}]("datasets/job/8b/mc.csv")
let cn = load[{<id: int, name: string, country_code: string, imdb_id: string, name_pcode_nf: string, name_pcode_sf: string, md5sum: string> -> int}]("datasets/job/8b/cn.csv")
let ci = load[{<id: int, person_id: int, movie_id: int, person_role_id: int, note: string, nr_order: int, role_id: int> -> int}]("datasets/job/8b/ci.csv")
let n = load[{<id: int, name: string, imdb_index: string, imdb_id: string, gender: string, name_pcode_cf: string, name_pcode_nf: string, surname_pcode: string, md5sum: string> -> int}]("datasets/job/8b/n.csv")
let rt = load[{<id: int, role: string> -> int}]("datasets/job/8b/rt.csv")
let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/8b/t.csv")
let an = load[{<id: int, person_id: int, name: string, imdb_index: string, name_pcode_cf: string, name_pcode_nf: string, surname_pcode: string, md5sum: string> -> int}]("datasets/job/aka_name.csv")

let mc_trie0 = sum_vec(<mc_tuple, _> <- mc) { mc_tuple.company_id -> { mc_tuple -> 1 } } in
let cn_trie0 = sum_vec(<cn_tuple, _> <- cn) { cn_tuple.id -> { cn_tuple -> 1 } } in
let interm0_trie0 = sum_vec(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ cn_trie0) then
		let cn_trie1 = cn_trie0(x0) in
		sum_vec(<mc_tuple, _> <- mc_trie1)
			{ mc_tuple.movie_id -> { <col0=mc_tuple.company_id, col1=mc_tuple.movie_id> -> 1 } }
in

let ci_trie0 = sum(<ci_tuple, _> <- ci) { ci_tuple.person_id -> { ci_tuple.movie_id -> { ci_tuple.role_id -> 1 } } } in
let n_trie0 = sum(<n_tuple, _> <- n) { n_tuple.id -> 1 } in
let rt_trie0 = sum(<rt_tuple, _> <- rt) { rt_tuple.id -> 1 } in
let t_trie0 = sum_vec(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple -> 1 } } in
let an_trie0 = sum_vec(<an_tuple, _> <- an) { an_tuple.person_id -> { an_tuple -> 1 } } in
min(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ n_trie0) then
		let n_trie1 = n_trie0(x0) in
		min(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ interm0_trie0) then
				let interm0_trie1 = interm0_trie0(x1) in
				min(<x2, ci_trie3> <- ci_trie2)
					if (x2 ∈ rt_trie0) then
						let rt_trie1 = rt_trie0(x2) in
						if (x1 ∈ t_trie0) then
							let t_trie1 = t_trie0(x1) in
							if (x0 ∈ an_trie0) then
								let an_trie1 = an_trie0(x0) in
								let mn_t = min(<t_tuple, _> <- t_trie1) <title=t_tuple.title> in
								let mn_an = min(<an_tuple, _> <- an_trie1) <name=an_tuple.name> in
								<col4=mn_t.title, col5=mn_an.name>
