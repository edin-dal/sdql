let mc = load[<id: @vector {int -> int}, movie_id: @vector {int -> int}, company_id: @vector {int -> int}, company_type_id: @vector {int -> int}, note: @vector {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let t = load[<id: @vector {int -> int}, title: @vector {int -> string}, imdb_index: @vector {int -> string}, kind_id: @vector {int -> int}, production_year: @vector {int -> int}, imdb_id: @vector {int -> string}, phonetic_code: @vector {int -> string}, episode_of_id: @vector {int -> int}, season_nr: @vector {int -> int}, episode_nr: @vector {int -> int}, series_years: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/10a/t.csv")
let ct = load[<id: @vector {int -> int}, kind: @vector {int -> string}, size: int>]("datasets/job/company_type.csv")
let cn = load[<id: @vector {int -> int}, name: @vector {int -> string}, country_code: @vector {int -> string}, imdb_id: @vector {int -> string}, name_pcode_nf: @vector {int -> string}, name_pcode_sf: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/10a/cn.csv")
let ci = load[<id: @vector {int -> int}, person_id: @vector {int -> int}, movie_id: @vector {int -> int}, person_role_id: @vector {int -> int}, note: @vector {int -> string}, nr_order: @vector {int -> int}, role_id: @vector {int -> int}, size: int>]("datasets/job/10a/ci.csv")
let rt = load[<id: @vector {int -> int}, role: @vector {int -> string}, size: int>]("datasets/job/10a/rt.csv")
let chn = load[<id: @vector {int -> int}, name: @vector {int -> string}, imdb_index: @vector {int -> string}, imdb_id: @vector {int -> int}, name_pcode_cf: @vector {int -> string}, surname_pcode: @vector {int -> string}, md5sum: @vector {int -> string}, size: int>]("datasets/job/char_name.csv")

let mc_trie0 =
	sum(<i,_> <- range(mc.size))
		let mc_tuple = <
			id=mc.id(i),
			movie_id=mc.movie_id(i),
			company_id=mc.company_id(i),
			company_type_id=mc.company_type_id(i),
			note=mc.note(i)
		>
		{ mc_tuple.movie_id -> { mc_tuple.company_type_id -> { mc_tuple.company_id -> @vecdict { mc_tuple -> 1 } } } } in

let t_trie0 =
	sum(<i,_> <- range(t.size))
		let t_tuple = <
			id=t.id(i),
			title=t.title(i),
			imdb_index=t.imdb_index(i),
			kind_id=t.kind_id(i),
			production_year=t.production_year(i),
			imdb_id=t.imdb_id(i),
			phonetic_code=t.phonetic_code(i),
			episode_of_id=t.episode_of_id(i),
			season_nr=t.season_nr(i),
			episode_nr=t.episode_nr(i),
			series_years=t.series_years(i),
			md5sum=t.md5sum(i)
		>
		{ t_tuple.id -> @vecdict { t_tuple -> 1 } } in

let ct_trie0 =
	sum(<i,_> <- range(ct.size))
		let ct_tuple = <
			id=ct.id(i),
			kind=ct.kind(i)
		>
		{ ct_tuple.id -> @vecdict { ct_tuple -> 1 } } in

let cn_trie0 =
	sum(<i,_> <- range(cn.size))
		let cn_tuple = <
			id=cn.id(i),
			name=cn.name(i),
			country_code=cn.country_code(i),
			imdb_id=cn.imdb_id(i),
			name_pcode_nf=cn.name_pcode_nf(i),
			name_pcode_sf=cn.name_pcode_sf(i),
			md5sum=cn.md5sum(i)
		>
		{ cn_tuple.id -> @vecdict { cn_tuple -> 1 } } in

let interm0_trie0 = sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ t_trie0) then
		let t_trie1 = t_trie0(x0) in
		sum(<x1, mc_trie2> <- mc_trie1)
			if (x1 ∈ ct_trie0) then
				let ct_trie1 = ct_trie0(x1) in
				sum(<x2, mc_trie3> <- mc_trie2)
					if (x2 ∈ cn_trie0) then
						let cn_trie1 = cn_trie0(x2) in
						sum(<mc_tuple, _> <- mc_trie3)
							sum(<t_tuple, _> <- t_trie1)
								{ mc_tuple.movie_id -> @vecdict { <col0=mc_tuple.movie_id, col1=mc_tuple.company_type_id, col2=mc_tuple.company_id, col3=t_tuple.title> -> 1 } }
in

let ci_trie0 =
	sum(<i,_> <- range(ci.size))
		let ci_tuple = <
			id=ci.id(i),
			person_id=ci.person_id(i),
			movie_id=ci.movie_id(i),
			person_role_id=ci.person_role_id(i),
			note=ci.note(i),
			nr_order=ci.nr_order(i),
			role_id=ci.role_id(i)
		>
		{ ci_tuple.role_id -> { ci_tuple.movie_id -> { ci_tuple.person_role_id -> 1 } } } in

let rt_trie0 =
	sum(<i,_> <- range(rt.size))
		let rt_tuple = <
			id=rt.id(i),
			role=rt.role(i)
		>
		{ rt_tuple.id -> 1 } in

let chn_trie0 =
	sum(<i,_> <- range(chn.size))
		let chn_tuple = <
			id=chn.id(i),
			name=chn.name(i),
			imdb_index=chn.imdb_index(i),
			imdb_id=chn.imdb_id(i),
			name_pcode_cf=chn.name_pcode_cf(i),
			surname_pcode=chn.surname_pcode(i),
			md5sum=chn.md5sum(i)
		>
		{ chn_tuple.id -> @vecdict { chn_tuple -> 1 } } in

sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ rt_trie0) then
		let rt_trie1 = rt_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ interm0_trie0) then
				let interm0_trie1 = interm0_trie0(x1) in
				sum(<x2, ci_trie3> <- ci_trie2)
					if (x2 ∈ chn_trie0) then
						let chn_trie1 = chn_trie0(x2) in
						let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) promote[min_sum](<col3=interm0_tuple.col3>) in
						let mn_chn = sum(<chn_tuple, _> <- chn_trie1) promote[min_sum](<name=chn_tuple.name>) in
						promote[min_sum](<col5=mn_interm0.col3, col6=mn_chn.name>)
