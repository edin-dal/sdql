let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("datasets/job/11a/t.csv")
let ml = load[{<id: int, movie_id: int, linked_movie_id: int, link_type_id: int> -> int}]("datasets/job/movie_link.csv")
let mk = load[{<id: int, movie_id: int, keyword_id: int> -> int}]("datasets/job/movie_keyword.csv")
let mc = load[{<id: int, movie_id: int, company_id: int, company_type_id: int, note: string> -> int}]("datasets/job/11a/mc.csv")
let lt = load[{<id: int, link: string> -> int}]("datasets/job/11a/lt.csv")
let k = load[{<id: int, keyword: string, phonetic_code: string> -> int}]("datasets/job/11a/k.csv")
let ct = load[{<id: int, kind: string> -> int}]("datasets/job/11a/ct.csv")
let cn = load[{<id: int, name: string, country_code: string, imdb_id: string, name_pcode_nf: string, name_pcode_sf: string, md5sum: string> -> int}]("datasets/job/11a/cn.csv")

let t_trie0 = sum_vec(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple -> 1 } } in
let ml_trie0 = sum_vec(<ml_tuple, _> <- ml) { ml_tuple.movie_id -> { ml_tuple -> 1 } } in
let interm0_trie0 = sum_vec(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ ml_trie0) then
		let ml_trie1 = ml_trie0(x0) in
		sum_vec(<t_tuple, _> <- t_trie1)
			sum_vec(<ml_tuple, _> <- ml_trie1)
				{ t_tuple.id -> { ml_tuple.link_type_id -> { <col0=t_tuple.id, col1=t_tuple.title, col2=ml_tuple.link_type_id> -> 1 } } }
	else
		{}
in

let mk_trie0 = sum(<mk_tuple, _> <- mk) { mk_tuple.movie_id -> { mk_tuple.keyword_id -> 1 } } in
let mc_trie0 = sum(<mc_tuple, _> <- mc) { mc_tuple.movie_id -> { mc_tuple.company_type_id -> { mc_tuple.company_id -> 1 } } } in
let lt_trie0 = sum_vec(<lt_tuple, _> <- lt) { lt_tuple.id -> { lt_tuple -> 1 } } in
let k_trie0 = sum(<k_tuple, _> <- k) { k_tuple.id -> 1 } in
let ct_trie0 = sum(<ct_tuple, _> <- ct) { ct_tuple.id -> 1 } in
let cn_trie0 = sum_vec(<cn_tuple, _> <- cn) { cn_tuple.id -> { cn_tuple -> 1 } } in
min(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ interm0_trie0) then
		if (x0 ∈ mc_trie0) then
			let interm0_trie1 = interm0_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			min(<x1, interm0_trie2> <- interm0_trie1)
				if (x1 ∈ lt_trie0) then
					let lt_trie1 = lt_trie0(x1) in
					min(<x2, mk_trie2> <- mk_trie1)
						if (x2 ∈ k_trie0) then
							let k_trie1 = k_trie0(x2) in
							min(<x3, mc_trie2> <- mc_trie1)
								if (x3 ∈ ct_trie0) then
									let ct_trie1 = ct_trie0(x3) in
									min(<x4, mc_trie3> <- mc_trie2)
										if (x4 ∈ cn_trie0) then
											let cn_trie1 = cn_trie0(x4) in
											let mn_interm0 = min(<interm0_tuple, _> <- interm0_trie2) <col1=interm0_tuple.col1> in
											let mn_lt = min(<lt_tuple, _> <- lt_trie1) <link=lt_tuple.link> in
											let mn_cn = min(<cn_tuple, _> <- cn_trie1) <name=cn_tuple.name> in
											<col3=mn_interm0.col1, col6=mn_lt.link, col7=mn_cn.name>
										else
											<>
								else
									<>
						else
							<>
				else
					<>
		else
			<>
	else
		<>
