let t1 = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/title.csv")
let ml = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, linked_movie_id: @vec {int -> int}, link_type_id: @vec {int -> int}, size: int>]("datasets/job/movie_link.csv")
let t2 = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/title.csv")
let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let lt = load[<id: @vec {int -> int}, link: @vec {int -> string}, size: int>]("datasets/job/link_type.csv")
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/32b/k.csv")

let ml_trie0 = sum(<i, _> <- range(ml.size)) @phmap(ml.size) { ml.movie_id(i) -> @smallvecdict(4) { i -> 1 } } in
let t2_trie0 = sum(<i, _> <- range(t2.size)) @phmap(t2.size) { t2.id(i) -> @smallvecdict(4) { i -> 1 } } in
let interm0 = sum(<t1_off, _> <- range(t1.size))
	let x0 = t1.id(t1_off) in
	if (x0 ∈ ml_trie0) then
		let ml_trie1 = ml_trie0(x0) in
		sum(<ml_off, _> <- ml_trie1)
			let x1 = ml.linked_movie_id(ml_off) in
			if (x1 ∈ t2_trie0) then
				let t2_trie1 = t2_trie0(x1) in
				sum(<t2_off, _> <- t2_trie1)
					@smallvecdict(4) { <col0=t1.id(t1_off), col1=t1.title(t1_off), col2=ml.linked_movie_id(ml_off), col3=ml.link_type_id(ml_off), col4=t2.title(t2_off)> -> 1 }
in

let interm0_trie0 = sum(<interm0_tuple, _> <- interm0) @phmap(ext(`Size`, interm0)) { interm0_tuple.col0 -> @smallvecdict(4) { interm0_tuple -> 1 } } in
let lt_trie0 = sum(<i, _> <- range(lt.size)) @phmap(lt.size) { lt.id(i) -> @smallvecdict(4) { i -> 1 } } in
let k_trie0 = sum(<i, _> <- range(k.size)) @phmap(k.size) { k.id(i) -> 1 } in
sum(<mk_off, _> <- range(mk.size))
	let x0 = mk.movie_id(mk_off) in
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<interm0_tuple, _> <- interm0_trie1)
			let x1 = interm0_tuple.col3 in
			if (x1 ∈ lt_trie0) then
				let lt_trie1 = lt_trie0(x1) in
				let x2 = mk.keyword_id(mk_off) in
				if (x2 ∈ k_trie0) then
					let k_trie1 = k_trie0(x2) in
					let mn_interm0 = <col1=interm0_tuple.col1, col4=interm0_tuple.col4> in
					let mn_lt = sum(<lt_off, _> <- lt_trie1) promote[min_sum](<link=lt.link(lt_off)>) in
					promote[min_sum](<col3=mn_interm0.col1, col5=mn_interm0.col4, col6=mn_lt.link>)

