let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/6c/t.csv")
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/6c/k.csv")
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/cast_info.csv")
let n = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> string}, gender: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/6c/n.csv")

let k_trie0 = sum(<i, _> <- range(k.size)) @phmap(k.size) { unique(k.id(i)) -> @smallvecdict(4) { i -> 1 } } in
let t_trie0 = sum(<i, _> <- range(t.size)) @phmap(t.size) { unique(t.id(i)) -> @smallvecdict(4) { i -> 1 } } in
let interm0_trie0 = sum(<mk_off, _> <- range(mk.size))
	let x0 = mk.keyword_id(mk_off) in
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		let x1 = mk.movie_id(mk_off) in
		if (x1 ∈ t_trie0) then
			let t_trie1 = t_trie0(x1) in
			sum(<t_off, _> <- t_trie1)
				sum(<k_off, _> <- k_trie1)
					@phmap(sum(<k, _> <- {1000000, mk.size}) promote[min_sum](k)) { mk.movie_id(mk_off) -> @smallvecdict(4) { <col1=mk.keyword_id(mk_off), col2=t.title(t_off), col3=k.keyword(k_off)> -> 1 } }
in

let n_trie0 = sum(<i, _> <- range(n.size)) @phmap(n.size) { unique(n.id(i)) -> @smallvecdict(4) { i -> 1 } } in
sum(<ci_off, _> <- range(ci.size))
	let x0 = ci.person_id(ci_off) in
	if (x0 ∈ n_trie0) then
		let n_trie1 = n_trie0(x0) in
		let x1 = ci.movie_id(ci_off) in
		if (x1 ∈ interm0_trie0) then
			let interm0_trie1 = interm0_trie0(x1) in
			let mn_n = sum(<n_off, _> <- n_trie1) promote[min_sum](<name=n.name(n_off)>) in
			let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) promote[min_sum](<col2=interm0_tuple.col2, col3=interm0_tuple.col3>) in
			promote[min_sum](<col2=mn_n.name, col4=mn_interm0.col2, col5=mn_interm0.col3>)

