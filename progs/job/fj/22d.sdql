let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/22d/t.csv")
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/22d/mi_idx.csv")
let kt = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/22d/kt.csv")
let it2 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/22d/it2.csv")
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/22d/cn.csv")
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/company_type.csv")
let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/22d/k.csv")
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/22d/mi.csv")
let it1 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/22d/it1.csv")

timer

let kt_trie0 = sum(<i, _> <- range(kt.size)) @phmap(kt.size) { unique(kt.id(i)) -> 1 } in
let mi_idx_trie0 = sum(<i, _> <- range(mi_idx.size)) @phmap(mi_idx.size) { mi_idx.movie_id(i) -> @smallvecdict(4) { i -> 1 } } in
let it2_trie0 = sum(<i, _> <- range(it2.size)) @phmap(it2.size) { unique(it2.id(i)) -> 1 } in
let interm0_trie0 = sum(<t_off, _> <- range(t.size))
	let x0 = t.kind_id(t_off) in
	if (x0 ∈ kt_trie0) then
		let kt_trie1 = kt_trie0(x0) in
		let x1 = t.id(t_off) in
		if (x1 ∈ mi_idx_trie0) then
			let mi_idx_trie1 = mi_idx_trie0(x1) in
			sum(<mi_idx_off, _> <- mi_idx_trie1)
				let x2 = mi_idx.info_type_id(mi_idx_off) in
				if (x2 ∈ it2_trie0) then
					let it2_trie1 = it2_trie0(x2) in
					@phmap(promote[min_sum](1000000) + promote[min_sum](t.size)) { t.id(t_off) -> @smallvecdict(4) { <col1=t.kind_id(t_off), col2=t.title(t_off), col3=mi_idx.info_type_id(mi_idx_off), col4=mi_idx.info(mi_idx_off)> -> 1 } }
in

let ct_trie0 = sum(<i, _> <- range(ct.size)) @phmap(ct.size) { unique(ct.id(i)) -> 1 } in
let cn_trie0 = sum(<i, _> <- range(cn.size)) @phmap(cn.size) { cn.id(i) -> @smallvecdict(4) { i -> 1 } } in
let interm1_trie0 = sum(<mc_off, _> <- range(mc.size))
	let x0 = mc.company_type_id(mc_off) in
	if (x0 ∈ ct_trie0) then
		let ct_trie1 = ct_trie0(x0) in
		let x1 = mc.movie_id(mc_off) in
		if (x1 ∈ interm0_trie0) then
			let interm0_trie1 = interm0_trie0(x1) in
			let x2 = mc.company_id(mc_off) in
			if (x2 ∈ cn_trie0) then
				let cn_trie1 = cn_trie0(x2) in
				sum(<cn_off, _> <- cn_trie1)
					sum(<interm0_tuple, _> <- interm0_trie1)
						@phmap(promote[min_sum](1000000) + promote[min_sum](mc.size)) { mc.movie_id(mc_off) -> @smallvecdict(4) { <col0=mc.company_id(mc_off), col1=mc.company_type_id(mc_off), col3=cn.name(cn_off), col5=interm0_tuple.col2, col7=interm0_tuple.col4> -> 1 } }
in

let k_trie0 = sum(<i, _> <- range(k.size)) @phmap(k.size) { unique(k.id(i)) -> 1 } in
let interm2_trie0 = sum(<mk_off, _> <- range(mk.size))
	let x0 = mk.keyword_id(mk_off) in
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		let x1 = mk.movie_id(mk_off) in
		if (x1 ∈ interm1_trie0) then
			let interm1_trie1 = interm1_trie0(x1) in
			sum(<interm1_tuple, _> <- interm1_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](mk.size)) { mk.movie_id(mk_off) -> @smallvecdict(4) { <col0=mk.keyword_id(mk_off), col4=interm1_tuple.col3, col6=interm1_tuple.col5, col8=interm1_tuple.col7> -> 1 } }
in

let it1_trie0 = sum(<i, _> <- range(it1.size)) @phmap(it1.size) { unique(it1.id(i)) -> 1 } in
sum(<mi_off, _> <- range(mi.size))
	let x0 = mi.info_type_id(mi_off) in
	if (x0 ∈ it1_trie0) then
		let it1_trie1 = it1_trie0(x0) in
		let x1 = mi.movie_id(mi_off) in
		if (x1 ∈ interm2_trie0) then
			let interm2_trie1 = interm2_trie0(x1) in
			let mn_interm2 = sum(<interm2_tuple, _> <- interm2_trie1) promote[min_sum](<col4=interm2_tuple.col4, col6=interm2_tuple.col6, col8=interm2_tuple.col8>) in
			promote[min_sum](<col5=mn_interm2.col4, col7=mn_interm2.col6, col9=mn_interm2.col8>)

