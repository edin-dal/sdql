let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/1c/t.csv")
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/movie_info_idx.csv")
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/1c/mc.csv")
let it = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/1c/it.csv")
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/1c/ct.csv")

let mi_idx_trie0 = sum(<i, _> <- range(mi_idx.size)) @phmap(mi_idx.size) { mi_idx.movie_id(i) -> @smallvecdict(4) { i -> 1 } } in
let interm0_trie0 = sum(<t_off, _> <- range(t.size))
	let x0 = t.id(t_off) in
	if (x0 ∈ mi_idx_trie0) then
		let mi_idx_trie1 = mi_idx_trie0(x0) in
		sum(<mi_idx_off, _> <- mi_idx_trie1)
			@phmap(t.size) { t.id(t_off) -> @smallvecdict(4) { <col0=t.id(t_off), col1=t.title(t_off), col2=t.production_year(t_off), col3=mi_idx.info_type_id(mi_idx_off)> -> 1 } }
in

let it_trie0 = sum(<i, _> <- range(it.size)) @phmap(it.size) { it.id(i) -> 1 } in
let ct_trie0 = sum(<i, _> <- range(ct.size)) @phmap(ct.size) { ct.id(i) -> 1 } in
sum(<mc_off, _> <- range(mc.size))
	let x0 = mc.movie_id(mc_off) in
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<interm0_tuple, _> <- interm0_trie1)
			let x1 = interm0_tuple.col3 in
			if (x1 ∈ it_trie0) then
				let it_trie1 = it_trie0(x1) in
				let x2 = mc.company_type_id(mc_off) in
				if (x2 ∈ ct_trie0) then
					let ct_trie1 = ct_trie0(x2) in
					let mn_mc = <note=mc.note(mc_off)> in
					let mn_interm0 = <col1=interm0_tuple.col1, col2=interm0_tuple.col2> in
					promote[min_sum](<col2=mn_mc.note, col4=mn_interm0.col1, col5=mn_interm0.col2>)

