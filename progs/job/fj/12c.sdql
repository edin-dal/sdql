let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/12c/t.csv")
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/12c/mi_idx.csv")
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/12c/mi.csv")
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let it2 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/12c/it2.csv")
let it1 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/12c/it1.csv")
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/12c/ct.csv")
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/12c/cn.csv")

let mi_idx_trie0 = sum(<i, _> <- range(mi_idx.size)) { mi_idx.movie_id(i) -> @smallvecdict(4) { i -> 1 } } in
let interm0 = sum(<t_off, _> <- range(t.size))
	let x0 = t.id(t_off) in
	if (x0 ∈ mi_idx_trie0) then
		let mi_idx_trie1 = mi_idx_trie0(x0) in
		sum(<mi_idx_off, _> <- mi_idx_trie1)
			@smallvecdict(4) { <col0=t.id(t_off), col1=t.title(t_off), col2=mi_idx.info_type_id(mi_idx_off), col3=mi_idx.info(mi_idx_off)> -> 1 }
in

let interm0_trie0 = sum(<interm0_tuple, _> <- interm0) { interm0_tuple.col0 -> @smallvecdict(4) { interm0_tuple -> 1 } } in
let mc_trie0 = sum(<i, _> <- range(mc.size)) { mc.movie_id(i) -> @smallvecdict(4) { i -> 1 } } in
let it2_trie0 = sum(<i, _> <- range(it2.size)) { it2.id(i) -> 1 } in
let it1_trie0 = sum(<i, _> <- range(it1.size)) { it1.id(i) -> 1 } in
let ct_trie0 = sum(<i, _> <- range(ct.size)) { ct.id(i) -> 1 } in
let cn_trie0 = sum(<i, _> <- range(cn.size)) { cn.id(i) -> @smallvecdict(4) { i -> 1 } } in
sum(<mi_off, _> <- range(mi.size))
	let x0 = mi.movie_id(mi_off) in
	if (x0 ∈ interm0_trie0) then
		if (x0 ∈ mc_trie0) then
			let interm0_trie1 = interm0_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			sum(<interm0_tuple, _> <- interm0_trie1)
				let x1 = interm0_tuple.col2 in
				if (x1 ∈ it2_trie0) then
					let it2_trie1 = it2_trie0(x1) in
					let x2 = mi.info_type_id(mi_off) in
					if (x2 ∈ it1_trie0) then
						let it1_trie1 = it1_trie0(x2) in
						sum(<mc_off, _> <- mc_trie1)
							let x3 = mc.company_type_id(mc_off) in
							if (x3 ∈ ct_trie0) then
								let ct_trie1 = ct_trie0(x3) in
								let x4 = mc.company_id(mc_off) in
								if (x4 ∈ cn_trie0) then
									let cn_trie1 = cn_trie0(x4) in
									let mn_interm0 = <col1=interm0_tuple.col1, col3=interm0_tuple.col3> in
									let mn_cn = sum(<cn_off, _> <- cn_trie1) promote[min_sum](<name=cn.name(cn_off)>) in
									promote[min_sum](<col3=mn_interm0.col1, col4=mn_interm0.col3, col7=mn_cn.name>)

