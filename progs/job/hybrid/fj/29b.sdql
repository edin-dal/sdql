let cc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, subject_id: @vec {int -> int}, status_id: @vec {int -> int}, size: int>]("datasets/job/complete_cast.csv")
let cc_offsets = ext(`SortedIndices`, cc.movie_id)
let cct1 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/29b/cct1.csv")
let cct1_offsets = ext(`SortedIndices`, cct1.id)
let cct2 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/29b/cct2.csv")
let cct2_offsets = ext(`SortedIndices`, cct2.id)
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/29b/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let mc_offsets = ext(`SortedIndices`, mc.movie_id)
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/29b/cn.csv")
let cn_offsets = ext(`SortedIndices`, cn.id)
let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let mk_offsets = ext(`SortedIndices`, mk.movie_id)
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/29b/k.csv")
let k_offsets = ext(`SortedIndices`, k.id)
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/29b/mi.csv")
let mi_offsets = ext(`SortedIndices`, mi.movie_id)
let it = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/29b/it.csv")
let it_offsets = ext(`SortedIndices`, it.id)
let pi = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/person_info.csv")
let pi_offsets = ext(`SortedIndices`, pi.person_id)
let an = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/aka_name.csv")
let an_offsets = ext(`SortedIndices`, an.person_id)
let it3 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/29b/it3.csv")
let it3_offsets = ext(`SortedIndices`, it3.id)
let n = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> string}, gender: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/29b/n.csv")
let n_offsets = ext(`SortedIndices`, n.id)
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/29b/ci.csv")
let ci_offsets = ext(`SortedIndices`, ci.person_id)
let chn = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> int}, name_pcode_cf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/29b/chn.csv")
let chn_offsets = ext(`SortedIndices`, chn.id)
let rt = load[<id: @vec {int -> int}, role: @vec {int -> string}, size: int>]("datasets/job/29b/rt.csv")
let rt_offsets = ext(`SortedIndices`, rt.id)

timer

let cct1_trie0 = sum(<i, _> <- range(cct1.size)) @st(cct1.size) { cct1.id(cct1_offsets(i)) -> 1 } in
let cct2_trie0 = sum(<i, _> <- range(cct2.size)) @st(cct2.size) { cct2.id(cct2_offsets(i)) -> 1 } in
let interm0_trie0 = sum(<cc_off, _> <- range(cc.size))
	let x0 = cc.subject_id(cc_off) in
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		let x1 = cc.status_id(cc_off) in
		if (x1 ∈ cct2_trie0) then
			let cct2_trie1 = cct2_trie0(x1) in
			@phmap(promote[min_sum](1000000) + promote[min_sum](cc.size)) { cc.movie_id(cc_off) -> @smallvecdict(4) { <col0=cc.subject_id(cc_off), col1=cc.status_id(cc_off)> -> 1 } }
in

let interm1_trie0 = sum(<t_off, _> <- range(t.size))
	let x0 = t.id(t_off) in
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		@phmap(promote[min_sum](1000000) + promote[min_sum](t.size)) { t.id(t_off) -> @smallvecdict(4) { <col1=t.title(t_off)> -> 1 } }
in

let cn_trie0 = sum(<i, _> <- range(cn.size)) @st(cn.size) { cn.id(cn_offsets(i)) -> 1 } in
let interm2_trie0 = sum(<mc_off, _> <- range(mc.size))
	let x0 = mc.movie_id(mc_off) in
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		let x1 = mc.company_id(mc_off) in
		if (x1 ∈ cn_trie0) then
			let cn_trie1 = cn_trie0(x1) in
			sum(<interm1_tuple, _> <- interm1_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](mc.size)) { mc.movie_id(mc_off) -> @smallvecdict(4) { <col0=mc.company_id(mc_off), col2=interm1_tuple.col1> -> 1 } }
in

let k_trie0 = sum(<i, _> <- range(k.size)) @st(k.size) { k.id(k_offsets(i)) -> 1 } in
let interm3_trie0 = sum(<mk_off, _> <- range(mk.size))
	let x0 = mk.keyword_id(mk_off) in
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		let x1 = mk.movie_id(mk_off) in
		if (x1 ∈ interm2_trie0) then
			let interm2_trie1 = interm2_trie0(x1) in
			sum(<interm2_tuple, _> <- interm2_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](mk.size)) { mk.movie_id(mk_off) -> @smallvecdict(4) { <col0=mk.keyword_id(mk_off), col3=interm2_tuple.col2> -> 1 } }
in

let it_trie0 = sum(<i, _> <- range(it.size)) @st(it.size) { it.id(it_offsets(i)) -> 1 } in
let interm4_trie0 = sum(<mi_off, _> <- range(mi.size))
	let x0 = mi.info_type_id(mi_off) in
	if (x0 ∈ it_trie0) then
		let it_trie1 = it_trie0(x0) in
		let x1 = mi.movie_id(mi_off) in
		if (x1 ∈ interm3_trie0) then
			let interm3_trie1 = interm3_trie0(x1) in
			sum(<interm3_tuple, _> <- interm3_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](mi.size)) { mi.movie_id(mi_off) -> @smallvecdict(4) { <col0=mi.info_type_id(mi_off), col1=mi.movie_id(mi_off), col4=interm3_tuple.col3> -> 1 } }
in

let it3_trie0 = sum(<i, _> <- range(it3.size)) @st(it3.size) { it3.id(it3_offsets(i)) -> 1 } in
let an_trie0 = sum(<i, _> <- range(an.size)) @st(an.size) { an.person_id(an_offsets(i)) -> 1 } in
let interm5_trie0 = sum(<pi_off, _> <- range(pi.size))
	let x0 = pi.info_type_id(pi_off) in
	if (x0 ∈ it3_trie0) then
		let it3_trie1 = it3_trie0(x0) in
		let x1 = pi.person_id(pi_off) in
		if (x1 ∈ an_trie0) then
			let an_trie1 = an_trie0(x1) in
			@phmap(promote[min_sum](1000000) + promote[min_sum](pi.size)) { pi.person_id(pi_off) -> @smallvecdict(4) { <col1=pi.info_type_id(pi_off)> -> 1 } }
in

let interm6_trie0 = sum(<n_off, _> <- range(n.size))
	let x0 = n.id(n_off) in
	if (x0 ∈ interm5_trie0) then
		let interm5_trie1 = interm5_trie0(x0) in
		@phmap(promote[min_sum](1000000) + promote[min_sum](n.size)) { n.id(n_off) -> @smallvecdict(4) { <col1=n.name(n_off)> -> 1 } }
in

let chn_trie0 = sum(<i, _> <- range(chn.size)) @st(chn.size) { chn.id(chn_offsets(i)) -> @range { i -> 1 } } in
let rt_trie0 = sum(<i, _> <- range(rt.size)) @st(rt.size) { rt.id(rt_offsets(i)) -> 1 } in
sum(<ci_off, _> <- range(ci.size))
	let x0 = ci.person_role_id(ci_off) in
	if (x0 ∈ chn_trie0) then
		let chn_trie1 = chn_trie0(x0) in
		let x1 = ci.role_id(ci_off) in
		if (x1 ∈ rt_trie0) then
			let rt_trie1 = rt_trie0(x1) in
			let x2 = ci.movie_id(ci_off) in
			if (x2 ∈ interm4_trie0) then
				let interm4_trie1 = interm4_trie0(x2) in
				let x3 = ci.person_id(ci_off) in
				if (x3 ∈ interm6_trie0) then
					let interm6_trie1 = interm6_trie0(x3) in
					let mn_chn = sum(<chn_i, _> <- chn_trie1) let chn_off = chn_offsets(chn_i) in promote[min_sum](<name=chn.name(chn_off)>) in
					let mn_interm6 = sum(<interm6_tuple, _> <- interm6_trie1) promote[min_sum](<col1=interm6_tuple.col1>) in
					let mn_interm4 = sum(<interm4_tuple, _> <- interm4_trie1) promote[min_sum](<col4=interm4_tuple.col4>) in
					promote[min_sum](<col4=mn_chn.name, col5=mn_interm6.col1, col10=mn_interm4.col4>)

