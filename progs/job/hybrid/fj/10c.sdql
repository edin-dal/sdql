let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let mc_offsets = ext(`SortedIndices`, mc.movie_id)
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/10c/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/company_type.csv")
let ct_offsets = ext(`SortedIndices`, ct.id)
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/10c/cn.csv")
let cn_offsets = ext(`SortedIndices`, cn.id)
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/10c/ci.csv")
let ci_offsets = ext(`SortedIndices`, ci.movie_id)
let rt = load[<id: @vec {int -> int}, role: @vec {int -> string}, size: int>]("datasets/job/role_type.csv")
let rt_offsets = ext(`SortedIndices`, rt.id)
let chn = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> int}, name_pcode_cf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/char_name.csv")
let chn_offsets = ext(`SortedIndices`, chn.id)

timer

let ct_trie0 = sum(<i, _> <- range(ct.size)) @st(ct.size) { ct.id(ct_offsets(i)) -> 1 } in
let cn_trie0 = sum(<i, _> <- range(cn.size)) @st(cn.size) { cn.id(cn_offsets(i)) -> 1 } in
let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let interm0_trie0 = sum(<mc_off, _> <- range(mc.size))
	let x0 = mc.company_type_id(mc_off) in
	if (x0 ∈ ct_trie0) then
		let ct_trie1 = ct_trie0(x0) in
		let x1 = mc.company_id(mc_off) in
		if (x1 ∈ cn_trie0) then
			let cn_trie1 = cn_trie0(x1) in
			let x2 = mc.movie_id(mc_off) in
			if (x2 ∈ t_trie0) then
				let t_trie1 = t_trie0(x2) in
				sum(<t_i, _> <- t_trie1)
					let t_off = t_offsets(t_i)
					@phmap(promote[min_sum](1000000) + promote[min_sum](mc.size)) { mc.movie_id(mc_off) -> @smallvecdict(4) { <col1=mc.company_type_id(mc_off), col2=mc.company_id(mc_off), col3=t.title(t_off)> -> 1 } }
in

let rt_trie0 = sum(<i, _> <- range(rt.size)) @st(rt.size) { rt.id(rt_offsets(i)) -> 1 } in
let chn_trie0 = sum(<i, _> <- range(chn.size)) @st(chn.size) { chn.id(chn_offsets(i)) -> @range { i -> 1 } } in
sum(<ci_off, _> <- range(ci.size))
	let x0 = ci.role_id(ci_off) in
	if (x0 ∈ rt_trie0) then
		let rt_trie1 = rt_trie0(x0) in
		let x1 = ci.movie_id(ci_off) in
		if (x1 ∈ interm0_trie0) then
			let interm0_trie1 = interm0_trie0(x1) in
			let x2 = ci.person_role_id(ci_off) in
			if (x2 ∈ chn_trie0) then
				let chn_trie1 = chn_trie0(x2) in
				let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) promote[min_sum](<col3=interm0_tuple.col3>) in
				let mn_chn = sum(<chn_i, _> <- chn_trie1) let chn_off = chn_offsets(chn_i) in promote[min_sum](<name=chn.name(chn_off)>) in
				promote[min_sum](<col5=mn_interm0.col3, col6=mn_chn.name>)

