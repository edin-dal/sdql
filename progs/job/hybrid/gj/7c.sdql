let n = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> string}, gender: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/7c/n.csv")
let n_offsets = ext(`SortedIndices`, n.id)
let pi = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/7c/pi.csv")
let pi_offsets = ext(`SortedIndices`, pi.person_id, pi.info_type_id)
let it = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/7c/it.csv")
let it_offsets = ext(`SortedIndices`, it.id)
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/7c/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let ml = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, linked_movie_id: @vec {int -> int}, link_type_id: @vec {int -> int}, size: int>]("datasets/job/movie_link.csv")
let ml_offsets = ext(`SortedIndices`, ml.linked_movie_id, ml.link_type_id)
let lt = load[<id: @vec {int -> int}, link: @vec {int -> string}, size: int>]("datasets/job/7c/lt.csv")
let lt_offsets = ext(`SortedIndices`, lt.id)
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/cast_info.csv")
let ci_offsets = ext(`SortedIndices`, ci.movie_id, ci.person_id)
let an = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/7c/an.csv")
let an_offsets = ext(`SortedIndices`, an.person_id)

timer

let n_trie0 = sum(<i, _> <- range(n.size)) @st(n.size) { n.id(n_offsets(i)) -> @range { i -> 1 } } in
let pi_trie0 = sum(<i, _> <- range(pi.size)) @st(pi.size) { pi.person_id(pi_offsets(i)) -> @st(pi.size) { pi.info_type_id(pi_offsets(i)) -> @range { i -> 1 } } } in
let it_trie0 = sum(<i, _> <- range(it.size)) @st(it.size) { it.id(it_offsets(i)) -> 1 } in
let interm0_trie0 = sum(<x0, n_trie1> <- n_trie0)
	if (x0 ∈ pi_trie0) then
		let pi_trie1 = pi_trie0(x0) in
		sum(<x1, pi_trie2> <- pi_trie1)
			if (x1 ∈ it_trie0) then
				let it_trie1 = it_trie0(x1) in
				sum(<n_i, _> <- n_trie1)
					let n_off = n_offsets(n_i)
					sum(<pi_i, _> <- pi_trie2)
						let pi_off = pi_offsets(pi_i)
						@phmap(promote[min_sum](1000000) + promote[min_sum](n.size)) { n.id(n_off) -> @smallvecdict(4) { <col1=n.name(n_off), col2=pi.info_type_id(pi_off), col3=pi.info(pi_off)> -> 1 } }
in

let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let ml_trie0 = sum(<i, _> <- range(ml.size)) @st(ml.size) { ml.linked_movie_id(ml_offsets(i)) -> @st(ml.size) { ml.link_type_id(ml_offsets(i)) -> @range { i -> 1 } } } in
let lt_trie0 = sum(<i, _> <- range(lt.size)) @st(lt.size) { lt.id(lt_offsets(i)) -> 1 } in
let interm1_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ ml_trie0) then
		let ml_trie1 = ml_trie0(x0) in
		sum(<x1, ml_trie2> <- ml_trie1)
			if (x1 ∈ lt_trie0) then
				let lt_trie1 = lt_trie0(x1) in
				sum(<t_i, _> <- t_trie1)
					let t_off = t_offsets(t_i)
					sum(<ml_i, _> <- ml_trie2)
						let ml_off = ml_offsets(ml_i)
						@phmap(promote[min_sum](1000000) + promote[min_sum](t.size)) { t.id(t_off) -> @smallvecdict(4) { <col1=ml.link_type_id(ml_off)> -> 1 } }
in

let ci_trie0 = sum(<i, _> <- range(ci.size)) @st(ci.size) { ci.movie_id(ci_offsets(i)) -> @st(ci.size) { ci.person_id(ci_offsets(i)) -> 1 } } in
let an_trie0 = sum(<i, _> <- range(an.size)) @st(an.size) { an.person_id(an_offsets(i)) -> 1 } in
sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ interm0_trie0) then
				if (x1 ∈ an_trie0) then
					let interm0_trie1 = interm0_trie0(x1) in
					let an_trie1 = an_trie0(x1) in
					let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) promote[min_sum](<col1=interm0_tuple.col1, col3=interm0_tuple.col3>) in
					promote[min_sum](<col3=mn_interm0.col1, col5=mn_interm0.col3>)

