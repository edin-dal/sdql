let ml = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, linked_movie_id: @vec {int -> int}, link_type_id: @vec {int -> int}, size: int>]("datasets/job/movie_link.csv")
let ml_offsets = ext(`SortedIndices`, ml.link_type_id)
let lt = load[<id: @vec {int -> int}, link: @vec {int -> string}, size: int>]("datasets/job/27c/lt.csv")
let lt_offsets = ext(`SortedIndices`, lt.id)
let cc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, subject_id: @vec {int -> int}, status_id: @vec {int -> int}, size: int>]("datasets/job/complete_cast.csv")
let cc_offsets = ext(`SortedIndices`, cc.subject_id, cc.status_id, cc.movie_id)
let cct1 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/27c/cct1.csv")
let cct1_offsets = ext(`SortedIndices`, cct1.id)
let cct2 = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/27c/cct2.csv")
let cct2_offsets = ext(`SortedIndices`, cct2.id)
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/27c/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/27c/mc.csv")
let mc_offsets = ext(`SortedIndices`, mc.company_type_id, mc.company_id, mc.movie_id)
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/27c/ct.csv")
let ct_offsets = ext(`SortedIndices`, ct.id)
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/27c/cn.csv")
let cn_offsets = ext(`SortedIndices`, cn.id)
let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let mk_offsets = ext(`SortedIndices`, mk.keyword_id, mk.movie_id)
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/27c/k.csv")
let k_offsets = ext(`SortedIndices`, k.id)
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/27c/mi.csv")
let mi_offsets = ext(`SortedIndices`, mi.movie_id)

timer

let ml_trie0 = sum(<i, _> <- range(ml.size)) @st(ml.size) { ml.link_type_id(ml_offsets(i)) -> @range { i -> 1 } } in
let lt_trie0 = sum(<i, _> <- range(lt.size)) @st(lt.size) { lt.id(lt_offsets(i)) -> @range { i -> 1 } } in
let interm0_trie0 = sum(<x0, ml_trie1> <- ml_trie0)
	if (x0 ∈ lt_trie0) then
		let lt_trie1 = lt_trie0(x0) in
		sum(<ml_i, _> <- ml_trie1)
			let ml_off = ml_offsets(ml_i)
			sum(<lt_i, _> <- lt_trie1)
				let lt_off = lt_offsets(lt_i)
				@phmap(promote[min_sum](1000000) + promote[min_sum](ml.size)) { ml.movie_id(ml_off) -> @smallvecdict(4) { <col0=ml.link_type_id(ml_off), col2=lt.link(lt_off)> -> 1 } }
in

let cc_trie0 = sum(<i, _> <- range(cc.size)) @st(cc.size) { cc.subject_id(cc_offsets(i)) -> @st(cc.size) { cc.status_id(cc_offsets(i)) -> @st(cc.size) { cc.movie_id(cc_offsets(i)) -> @range { i -> 1 } } } } in
let cct1_trie0 = sum(<i, _> <- range(cct1.size)) @st(cct1.size) { cct1.id(cct1_offsets(i)) -> 1 } in
let cct2_trie0 = sum(<i, _> <- range(cct2.size)) @st(cct2.size) { cct2.id(cct2_offsets(i)) -> 1 } in
let interm1_trie0 = sum(<x0, cc_trie1> <- cc_trie0)
	if (x0 ∈ cct1_trie0) then
		let cct1_trie1 = cct1_trie0(x0) in
		sum(<x1, cc_trie2> <- cc_trie1)
			if (x1 ∈ cct2_trie0) then
				let cct2_trie1 = cct2_trie0(x1) in
				sum(<x2, cc_trie3> <- cc_trie2)
					if (x2 ∈ interm0_trie0) then
						let interm0_trie1 = interm0_trie0(x2) in
						sum(<cc_i, _> <- cc_trie3)
							let cc_off = cc_offsets(cc_i)
							sum(<interm0_tuple, _> <- interm0_trie1)
								@phmap(promote[min_sum](1000000) + promote[min_sum](cc.size)) { cc.movie_id(cc_off) -> @smallvecdict(4) { <col0=cc.subject_id(cc_off), col1=cc.status_id(cc_off), col4=interm0_tuple.col2> -> 1 } }
in

let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let interm2_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ interm1_trie0) then
		let interm1_trie1 = interm1_trie0(x0) in
		sum(<t_i, _> <- t_trie1)
			let t_off = t_offsets(t_i)
			sum(<interm1_tuple, _> <- interm1_trie1)
				@phmap(promote[min_sum](1000000) + promote[min_sum](t.size)) { t.id(t_off) -> @smallvecdict(4) { <col1=t.title(t_off), col5=interm1_tuple.col4> -> 1 } }
in

let mc_trie0 = sum(<i, _> <- range(mc.size)) @st(mc.size) { mc.company_type_id(mc_offsets(i)) -> @st(mc.size) { mc.company_id(mc_offsets(i)) -> @st(mc.size) { mc.movie_id(mc_offsets(i)) -> @range { i -> 1 } } } } in
let ct_trie0 = sum(<i, _> <- range(ct.size)) @st(ct.size) { ct.id(ct_offsets(i)) -> 1 } in
let cn_trie0 = sum(<i, _> <- range(cn.size)) @st(cn.size) { cn.id(cn_offsets(i)) -> @range { i -> 1 } } in
let interm3_trie0 = sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ ct_trie0) then
		let ct_trie1 = ct_trie0(x0) in
		sum(<x1, mc_trie2> <- mc_trie1)
			if (x1 ∈ cn_trie0) then
				let cn_trie1 = cn_trie0(x1) in
				sum(<x2, mc_trie3> <- mc_trie2)
					if (x2 ∈ interm2_trie0) then
						let interm2_trie1 = interm2_trie0(x2) in
						sum(<mc_i, _> <- mc_trie3)
							let mc_off = mc_offsets(mc_i)
							sum(<cn_i, _> <- cn_trie1)
								let cn_off = cn_offsets(cn_i)
								sum(<interm2_tuple, _> <- interm2_trie1)
									@phmap(promote[min_sum](1000000) + promote[min_sum](mc.size)) { mc.movie_id(mc_off) -> @smallvecdict(4) { <col0=mc.company_type_id(mc_off), col1=mc.company_id(mc_off), col3=cn.name(cn_off), col4=interm2_tuple.col1, col8=interm2_tuple.col5> -> 1 } }
in

let mk_trie0 = sum(<i, _> <- range(mk.size)) @st(mk.size) { mk.keyword_id(mk_offsets(i)) -> @st(mk.size) { mk.movie_id(mk_offsets(i)) -> @range { i -> 1 } } } in
let k_trie0 = sum(<i, _> <- range(k.size)) @st(k.size) { k.id(k_offsets(i)) -> 1 } in
let interm4_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ k_trie0) then
		let k_trie1 = k_trie0(x0) in
		sum(<x1, mk_trie2> <- mk_trie1)
			if (x1 ∈ interm3_trie0) then
				let interm3_trie1 = interm3_trie0(x1) in
				sum(<mk_i, _> <- mk_trie2)
					let mk_off = mk_offsets(mk_i)
					sum(<interm3_tuple, _> <- interm3_trie1)
						@phmap(promote[min_sum](1000000) + promote[min_sum](mk.size)) { mk.movie_id(mk_off) -> @smallvecdict(4) { <col0=mk.keyword_id(mk_off), col4=interm3_tuple.col3, col5=interm3_tuple.col4, col9=interm3_tuple.col8> -> 1 } }
in

let mi_trie0 = sum(<i, _> <- range(mi.size)) @st(mi.size) { mi.movie_id(mi_offsets(i)) -> 1 } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm4_trie0) then
		let interm4_trie1 = interm4_trie0(x0) in
		let mn_interm4 = sum(<interm4_tuple, _> <- interm4_trie1) promote[min_sum](<col4=interm4_tuple.col4, col5=interm4_tuple.col5, col9=interm4_tuple.col9>) in
		promote[min_sum](<col4=mn_interm4.col4, col5=mn_interm4.col5, col9=mn_interm4.col9>)

