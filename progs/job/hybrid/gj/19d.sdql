let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/movie_info.csv")
let mi_offsets = ext(`SortedIndices`, mi.movie_id, mi.info_type_id)
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/19d/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let mc_offsets = ext(`SortedIndices`, mc.movie_id, mc.company_id)
let it = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/19d/it.csv")
let it_offsets = ext(`SortedIndices`, it.id)
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/19d/cn.csv")
let cn_offsets = ext(`SortedIndices`, cn.id)
let n = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> string}, gender: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/19d/n.csv")
let n_offsets = ext(`SortedIndices`, n.id)
let an = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, name_pcode_cf: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/aka_name.csv")
let an_offsets = ext(`SortedIndices`, an.person_id)
let ci = load[<id: @vec {int -> int}, person_id: @vec {int -> int}, movie_id: @vec {int -> int}, person_role_id: @vec {int -> int}, note: @vec {int -> string}, nr_order: @vec {int -> int}, role_id: @vec {int -> int}, size: int>]("datasets/job/19d/ci.csv")
let ci_offsets = ext(`SortedIndices`, ci.role_id, ci.person_role_id, ci.person_id, ci.movie_id)
let rt = load[<id: @vec {int -> int}, role: @vec {int -> string}, size: int>]("datasets/job/19d/rt.csv")
let rt_offsets = ext(`SortedIndices`, rt.id)
let chn = load[<id: @vec {int -> int}, name: @vec {int -> string}, imdb_index: @vec {int -> string}, imdb_id: @vec {int -> int}, name_pcode_cf: @vec {int -> string}, surname_pcode: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/char_name.csv")
let chn_offsets = ext(`SortedIndices`, chn.id)

timer

let mi_trie0 = sum(<i, _> <- range(mi.size)) @st(mi.size) { mi.movie_id(mi_offsets(i)) -> @st(mi.size) { mi.info_type_id(mi_offsets(i)) -> @range { i -> 1 } } } in
let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let mc_trie0 = sum(<i, _> <- range(mc.size)) @st(mc.size) { mc.movie_id(mc_offsets(i)) -> @st(mc.size) { mc.company_id(mc_offsets(i)) -> @range { i -> 1 } } } in
let it_trie0 = sum(<i, _> <- range(it.size)) @st(it.size) { it.id(it_offsets(i)) -> 1 } in
let cn_trie0 = sum(<i, _> <- range(cn.size)) @st(cn.size) { cn.id(cn_offsets(i)) -> 1 } in
let interm0_trie0 = sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ t_trie0) then
		if (x0 ∈ mc_trie0) then
			let t_trie1 = t_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			sum(<x1, mi_trie2> <- mi_trie1)
				if (x1 ∈ it_trie0) then
					let it_trie1 = it_trie0(x1) in
					sum(<x2, mc_trie2> <- mc_trie1)
						if (x2 ∈ cn_trie0) then
							let cn_trie1 = cn_trie0(x2) in
							sum(<mi_i, _> <- mi_trie2)
								let mi_off = mi_offsets(mi_i)
								sum(<t_i, _> <- t_trie1)
									let t_off = t_offsets(t_i)
									sum(<mc_i, _> <- mc_trie2)
										let mc_off = mc_offsets(mc_i)
										@phmap(promote[min_sum](1000000) + promote[min_sum](mi.size)) { mi.movie_id(mi_off) -> @smallvecdict(4) { <col1=mi.info_type_id(mi_off), col2=t.title(t_off), col3=mc.company_id(mc_off)> -> 1 } }
in

let n_trie0 = sum(<i, _> <- range(n.size)) @st(n.size) { n.id(n_offsets(i)) -> @range { i -> 1 } } in
let an_trie0 = sum(<i, _> <- range(an.size)) @st(an.size) { an.person_id(an_offsets(i)) -> 1 } in
let interm1_trie0 = sum(<x0, n_trie1> <- n_trie0)
	if (x0 ∈ an_trie0) then
		let an_trie1 = an_trie0(x0) in
		sum(<n_i, _> <- n_trie1)
			let n_off = n_offsets(n_i)
			@phmap(promote[min_sum](1000000) + promote[min_sum](n.size)) { n.id(n_off) -> @smallvecdict(4) { <col1=n.name(n_off)> -> 1 } }
in

let ci_trie0 = sum(<i, _> <- range(ci.size)) @st(ci.size) { ci.role_id(ci_offsets(i)) -> @st(ci.size) { ci.person_role_id(ci_offsets(i)) -> @st(ci.size) { ci.person_id(ci_offsets(i)) -> @st(ci.size) { ci.movie_id(ci_offsets(i)) -> 1 } } } } in
let rt_trie0 = sum(<i, _> <- range(rt.size)) @st(rt.size) { rt.id(rt_offsets(i)) -> 1 } in
let chn_trie0 = sum(<i, _> <- range(chn.size)) @st(chn.size) { chn.id(chn_offsets(i)) -> 1 } in
sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ rt_trie0) then
		let rt_trie1 = rt_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ chn_trie0) then
				let chn_trie1 = chn_trie0(x1) in
				sum(<x2, ci_trie3> <- ci_trie2)
					if (x2 ∈ interm1_trie0) then
						let interm1_trie1 = interm1_trie0(x2) in
						sum(<x3, ci_trie4> <- ci_trie3)
							if (x3 ∈ interm0_trie0) then
								let interm0_trie1 = interm0_trie0(x3) in
								let mn_interm1 = sum(<interm1_tuple, _> <- interm1_trie1) promote[min_sum](<col1=interm1_tuple.col1>) in
								let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) promote[min_sum](<col2=interm0_tuple.col2>) in
								promote[min_sum](<col4=mn_interm1.col1, col6=mn_interm0.col2>)

