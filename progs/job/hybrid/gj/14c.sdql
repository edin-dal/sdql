let mk = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, keyword_id: @vec {int -> int}, size: int>]("datasets/job/movie_keyword.csv")
let mk_offsets = ext(`SortedIndices`, mk.movie_id)
let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/14c/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/14c/mi_idx.csv")
let mi_idx_offsets = ext(`SortedIndices`, mi_idx.movie_id)
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/14c/mi.csv")
let mi_offsets = ext(`SortedIndices`, mi.movie_id, mi.info_type_id)
let kt = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/14c/kt.csv")
let kt_offsets = ext(`SortedIndices`, kt.id)
let k = load[<id: @vec {int -> int}, keyword: @vec {int -> string}, phonetic_code: @vec {int -> string}, size: int>]("datasets/job/14c/k.csv")
let k_offsets = ext(`SortedIndices`, k.id)
let it2 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/14c/it2.csv")
let it2_offsets = ext(`SortedIndices`, it2.id)
let it1 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/14c/it1.csv")
let it1_offsets = ext(`SortedIndices`, it1.id)

timer

let mk_trie0 = sum(<i, _> <- range(mk.size)) @st(mk.size) { mk.movie_id(mk_offsets(i)) -> @range { i -> 1 } } in
let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let mi_idx_trie0 = sum(<i, _> <- range(mi_idx.size)) @st(mi_idx.size) { mi_idx.movie_id(mi_idx_offsets(i)) -> @range { i -> 1 } } in
let interm0_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ t_trie0) then
		if (x0 ∈ mi_idx_trie0) then
			let t_trie1 = t_trie0(x0) in
			let mi_idx_trie1 = mi_idx_trie0(x0) in
			sum(<mk_i, _> <- mk_trie1)
				let mk_off = mk_offsets(mk_i)
				sum(<t_i, _> <- t_trie1)
					let t_off = t_offsets(t_i)
					sum(<mi_idx_i, _> <- mi_idx_trie1)
						let mi_idx_off = mi_idx_offsets(mi_idx_i)
						@phmap(promote[min_sum](1000000) + promote[min_sum](mk.size)) { mk.movie_id(mk_off) -> @smallvecdict(4) { <col1=mk.keyword_id(mk_off), col2=t.title(t_off), col3=t.kind_id(t_off), col4=mi_idx.info_type_id(mi_idx_off), col5=mi_idx.info(mi_idx_off)> -> 1 } }
in

let mi_trie0 = sum(<i, _> <- range(mi.size)) @st(mi.size) { mi.movie_id(mi_offsets(i)) -> @st(mi.size) { mi.info_type_id(mi_offsets(i)) -> 1 } } in
let kt_trie0 = sum(<i, _> <- range(kt.size)) @st(kt.size) { kt.id(kt_offsets(i)) -> 1 } in
let k_trie0 = sum(<i, _> <- range(k.size)) @st(k.size) { k.id(k_offsets(i)) -> 1 } in
let it2_trie0 = sum(<i, _> <- range(it2.size)) @st(it2.size) { it2.id(it2_offsets(i)) -> 1 } in
let it1_trie0 = sum(<i, _> <- range(it1.size)) @st(it1.size) { it1.id(it1_offsets(i)) -> 1 } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<interm0_tuple, _> <- interm0_trie1)
			let x1 = interm0_tuple.col3
			if (x1 ∈ kt_trie0) then
				let kt_trie1 = kt_trie0(x1) in
				let x2 = interm0_tuple.col1
				if (x2 ∈ k_trie0) then
					let k_trie1 = k_trie0(x2) in
					let x3 = interm0_tuple.col4
					if (x3 ∈ it2_trie0) then
						let it2_trie1 = it2_trie0(x3) in
						sum(<x4, mi_trie2> <- mi_trie1)
							if (x4 ∈ it1_trie0) then
								let it1_trie1 = it1_trie0(x4) in
								let mn_interm0 = <col2=interm0_tuple.col2, col5=interm0_tuple.col5> in
								promote[min_sum](<col5=mn_interm0.col2, col6=mn_interm0.col5>)

