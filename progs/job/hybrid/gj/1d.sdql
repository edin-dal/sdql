let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/1d/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/movie_info_idx.csv")
let mi_idx_offsets = ext(`SortedIndices`, mi_idx.movie_id)
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/1d/mc.csv")
let mc_offsets = ext(`SortedIndices`, mc.movie_id, mc.company_type_id)
let it = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/1d/it.csv")
let it_offsets = ext(`SortedIndices`, it.id)
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/1d/ct.csv")
let ct_offsets = ext(`SortedIndices`, ct.id)

timer

let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let mi_idx_trie0 = sum(<i, _> <- range(mi_idx.size)) @st(mi_idx.size) { mi_idx.movie_id(mi_idx_offsets(i)) -> @range { i -> 1 } } in
let interm0_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ mi_idx_trie0) then
		let mi_idx_trie1 = mi_idx_trie0(x0) in
		sum(<t_i, _> <- t_trie1)
			let t_off = t_offsets(t_i)
			sum(<mi_idx_i, _> <- mi_idx_trie1)
				let mi_idx_off = mi_idx_offsets(mi_idx_i)
				@phmap(promote[min_sum](1000000) + promote[min_sum](t.size)) { t.id(t_off) -> @smallvecdict(4) { <col1=t.title(t_off), col2=t.production_year(t_off), col3=mi_idx.info_type_id(mi_idx_off)> -> 1 } }
in

let mc_trie0 = sum(<i, _> <- range(mc.size)) @st(mc.size) { mc.movie_id(mc_offsets(i)) -> @st(mc.size) { mc.company_type_id(mc_offsets(i)) -> @range { i -> 1 } } } in
let it_trie0 = sum(<i, _> <- range(it.size)) @st(it.size) { it.id(it_offsets(i)) -> 1 } in
let ct_trie0 = sum(<i, _> <- range(ct.size)) @st(ct.size) { ct.id(ct_offsets(i)) -> 1 } in
sum(<x0, mc_trie1> <- mc_trie0)
	if (x0 ∈ interm0_trie0) then
		let interm0_trie1 = interm0_trie0(x0) in
		sum(<interm0_tuple, _> <- interm0_trie1)
			let x1 = interm0_tuple.col3
			if (x1 ∈ it_trie0) then
				let it_trie1 = it_trie0(x1) in
				sum(<x2, mc_trie2> <- mc_trie1)
					if (x2 ∈ ct_trie0) then
						let ct_trie1 = ct_trie0(x2) in
						let mn_mc = sum(<mc_i, _> <- mc_trie2) let mc_off = mc_offsets(mc_i) in promote[min_sum](<note=mc.note(mc_off)>) in
						let mn_interm0 = <col1=interm0_tuple.col1, col2=interm0_tuple.col2> in
						promote[min_sum](<col2=mn_mc.note, col4=mn_interm0.col1, col5=mn_interm0.col2>)

