let t = load[<id: @vec {int -> int}, title: @vec {int -> string}, imdb_index: @vec {int -> string}, kind_id: @vec {int -> int}, production_year: @vec {int -> int}, imdb_id: @vec {int -> string}, phonetic_code: @vec {int -> string}, episode_of_id: @vec {int -> int}, season_nr: @vec {int -> int}, episode_nr: @vec {int -> int}, series_years: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/12a/t.csv")
let t_offsets = ext(`SortedIndices`, t.id)
let mi_idx = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/12a/mi_idx.csv")
let mi_idx_offsets = ext(`SortedIndices`, mi_idx.movie_id)
let mi = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, info_type_id: @vec {int -> int}, info: @vec {int -> string}, note: @vec {int -> string}, size: int>]("datasets/job/12a/mi.csv")
let mi_offsets = ext(`SortedIndices`, mi.movie_id, mi.info_type_id)
let mc = load[<id: @vec {int -> int}, movie_id: @vec {int -> int}, company_id: @vec {int -> int}, company_type_id: @vec {int -> int}, note: @vec {int -> string}, size: int>]("datasets/job/movie_companies.csv")
let mc_offsets = ext(`SortedIndices`, mc.movie_id, mc.company_type_id, mc.company_id)
let it2 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/12a/it2.csv")
let it2_offsets = ext(`SortedIndices`, it2.id)
let it1 = load[<id: @vec {int -> int}, info: @vec {int -> string}, size: int>]("datasets/job/12a/it1.csv")
let it1_offsets = ext(`SortedIndices`, it1.id)
let ct = load[<id: @vec {int -> int}, kind: @vec {int -> string}, size: int>]("datasets/job/12a/ct.csv")
let ct_offsets = ext(`SortedIndices`, ct.id)
let cn = load[<id: @vec {int -> int}, name: @vec {int -> string}, country_code: @vec {int -> string}, imdb_id: @vec {int -> string}, name_pcode_nf: @vec {int -> string}, name_pcode_sf: @vec {int -> string}, md5sum: @vec {int -> string}, size: int>]("datasets/job/12a/cn.csv")
let cn_offsets = ext(`SortedIndices`, cn.id)

timer

let t_trie0 = sum(<i, _> <- range(t.size)) @st(t.size) { t.id(t_offsets(i)) -> @range { i -> 1 } } in
let mi_idx_trie0 = sum(<i, _> <- range(mi_idx.size)) @st(mi_idx.size) { mi_idx.movie_id(mi_idx_offsets(i)) -> @range { i -> 1 } } in
let interm0_trie0 = sum(<x0, t_trie1> <- t_trie0)
	if (x0 ∈ mi_idx_trie0) then
		let mi_idx_trie1 = mi_idx_trie0(x0) in
		sum(<t_i, _> <- t_trie1)
			let t_off = t_offsets(t_i)
			sum(<mi_idx_i, _> <- mi_idx_trie1)
				let mi_idx_off = mi_idx_offsets(mi_idx_i)
				@phmap(promote[min_sum](1000000) + promote[min_sum](t.size)) { t.id(t_off) -> @smallvecdict(4) { <col1=t.title(t_off), col2=mi_idx.info_type_id(mi_idx_off), col3=mi_idx.info(mi_idx_off)> -> 1 } }
in

let mi_trie0 = sum(<i, _> <- range(mi.size)) @st(mi.size) { mi.movie_id(mi_offsets(i)) -> @st(mi.size) { mi.info_type_id(mi_offsets(i)) -> 1 } } in
let mc_trie0 = sum(<i, _> <- range(mc.size)) @st(mc.size) { mc.movie_id(mc_offsets(i)) -> @st(mc.size) { mc.company_type_id(mc_offsets(i)) -> @st(mc.size) { mc.company_id(mc_offsets(i)) -> 1 } } } in
let it2_trie0 = sum(<i, _> <- range(it2.size)) @st(it2.size) { it2.id(it2_offsets(i)) -> 1 } in
let it1_trie0 = sum(<i, _> <- range(it1.size)) @st(it1.size) { it1.id(it1_offsets(i)) -> 1 } in
let ct_trie0 = sum(<i, _> <- range(ct.size)) @st(ct.size) { ct.id(ct_offsets(i)) -> 1 } in
let cn_trie0 = sum(<i, _> <- range(cn.size)) @st(cn.size) { cn.id(cn_offsets(i)) -> @range { i -> 1 } } in
sum(<x0, mi_trie1> <- mi_trie0)
	if (x0 ∈ interm0_trie0) then
		if (x0 ∈ mc_trie0) then
			let interm0_trie1 = interm0_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			sum(<interm0_tuple, _> <- interm0_trie1)
				let x1 = interm0_tuple.col2
				if (x1 ∈ it2_trie0) then
					let it2_trie1 = it2_trie0(x1) in
					sum(<x2, mi_trie2> <- mi_trie1)
						if (x2 ∈ it1_trie0) then
							let it1_trie1 = it1_trie0(x2) in
							sum(<x3, mc_trie2> <- mc_trie1)
								if (x3 ∈ ct_trie0) then
									let ct_trie1 = ct_trie0(x3) in
									sum(<x4, mc_trie3> <- mc_trie2)
										if (x4 ∈ cn_trie0) then
											let cn_trie1 = cn_trie0(x4) in
											let mn_interm0 = <col1=interm0_tuple.col1, col3=interm0_tuple.col3> in
											let mn_cn = sum(<cn_i, _> <- cn_trie1) let cn_off = cn_offsets(cn_i) in promote[min_sum](<name=cn.name(cn_off)>) in
											promote[min_sum](<col3=mn_interm0.col1, col4=mn_interm0.col3, col7=mn_cn.name>)

