let mk = load[{<id: int, movie_id: int, keyword_id: int> -> int}]("/Users/s2522996/Documents/free-join/data/imdb_csv/movie_keyword.csv")
let t = load[{<id: int, title: string, imdb_index: string, kind_id: int, production_year: int, imdb_id: string, phonetic_code: string, episode_of_id: int, season_nr: int, episode_nr: int, series_years: string, md5sum: string> -> int}]("/Users/s2522996/Documents/free-join/queries/preprocessed/join-order-benchmark/data/16a/t.csv")
let mc = load[{<id: int, movie_id: int, company_id: int, company_type_id: int, note: string> -> int}]("/Users/s2522996/Documents/free-join/data/imdb_csv/movie_companies.csv")
let k = load[{<id: int, keyword: string, phonetic_code: string> -> int}]("/Users/s2522996/Documents/free-join/queries/preprocessed/join-order-benchmark/data/16a/k.csv")
let cn = load[{<id: int, name: string, country_code: string, imdb_id: string, name_pcode_nf: string, name_pcode_sf: string, md5sum: string> -> int}]("/Users/s2522996/Documents/free-join/queries/preprocessed/join-order-benchmark/data/16a/cn.csv")
let ci = load[{<id: int, person_id: int, movie_id: int, person_role_id: int, note: string, nr_order: int, role_id: int> -> int}]("/Users/s2522996/Documents/free-join/data/imdb_csv/cast_info.csv")
let n = load[{<id: int, name: string, imdb_index: string, imdb_id: string, gender: string, name_pcode_cf: string, name_pcode_nf: string, surname_pcode: string, md5sum: string> -> int}]("/Users/s2522996/Documents/free-join/data/imdb_csv/name.csv")
let an = load[{<id: int, person_id: int, name: string, imdb_index: string, name_pcode_cf: string, name_pcode_nf: string, surname_pcode: string, md5sum: string> -> int}]("/Users/s2522996/Documents/free-join/data/imdb_csv/aka_name.csv")

let mk_trie0 = sum(<mk_tuple, _> <- mk) { mk_tuple.movie_id -> { mk_tuple.keyword_id -> { mk_tuple -> 1 } } } in
let t_trie0 = sum(<t_tuple, _> <- t) { t_tuple.id -> { t_tuple -> 1 } } in
let mc_trie0 = sum(<mc_tuple, _> <- mc) { mc_tuple.movie_id -> { mc_tuple.company_id -> { mc_tuple -> 1 } } } in
let k_trie0 = sum(<k_tuple, _> <- k) { k_tuple.id -> { k_tuple -> 1 } } in
let cn_trie0 = sum(<cn_tuple, _> <- cn) { cn_tuple.id -> { cn_tuple -> 1 } } in
let interm0_trie0 = sum(<x0, mk_trie1> <- mk_trie0)
	if (x0 ∈ t_trie0) then
		if (x0 ∈ mc_trie0) then
			let t_trie1 = t_trie0(x0) in
			let mc_trie1 = mc_trie0(x0) in
			sum(<x1, mk_trie2> <- mk_trie1)
				if (x1 ∈ k_trie0) then
					let k_trie1 = k_trie0(x1) in
					sum(<x2, mc_trie2> <- mc_trie1)
						if (x2 ∈ cn_trie0) then
							let cn_trie1 = cn_trie0(x2) in
							sum(<mk_tuple, _> <- mk_trie2)
								sum(<t_tuple, _> <- t_trie1)
									sum(<mc_tuple, _> <- mc_trie2)
										{ mk_tuple.movie_id -> { <col0=mk_tuple.movie_id, col1=mk_tuple.keyword_id, col2=t_tuple.title, col3=mc_tuple.company_id> -> 1 } }
						else
							{}
				else
					{}
		else
			{}
	else
		{}
in

let ci_trie0 = sum(<ci_tuple, _> <- ci) { ci_tuple.person_id -> { ci_tuple.movie_id -> { ci_tuple -> 1 } } } in
let n_trie0 = sum(<n_tuple, _> <- n) { n_tuple.id -> { n_tuple -> 1 } } in
let an_trie0 = sum(<an_tuple, _> <- an) { an_tuple.person_id -> { an_tuple -> 1 } } in
sum(<x0, ci_trie1> <- ci_trie0)
	if (x0 ∈ n_trie0) then
		let n_trie1 = n_trie0(x0) in
		sum(<x1, ci_trie2> <- ci_trie1)
			if (x1 ∈ interm0_trie0) then
				let interm0_trie1 = interm0_trie0(x1) in
				if (x0 ∈ an_trie0) then
					let an_trie1 = an_trie0(x0) in
					let mn_interm0 = sum(<interm0_tuple, _> <- interm0_trie1) <col2=interm0_tuple.col2> in
					let mn_an = sum(<an_tuple, _> <- an_trie1) <name=an_tuple.name> in
					<col3=mn_interm0.col2, col5=mn_an.name>
				else
					<col3="", col5="">
			else
				{}
	else
		{}

